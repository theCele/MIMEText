{"version":3,"file":"mimetext.node.es.js","sources":["../src/MIMETextError.ts","../src/Mailbox.ts","../src/MIMEMessageHeader.ts","../src/MIMEMessageContent.ts","../src/MIMEMessage.ts","../src/entrypoints/node.ts"],"sourcesContent":["export class MIMETextError extends Error {\r\n    override name = ''\r\n    description = ''\r\n\r\n    constructor (message: string, description = '') {\r\n        super(description)\r\n\r\n        this.name = message\r\n        this.description = description\r\n    }\r\n}\r\n","import { MIMETextError } from './MIMETextError.js'\r\n\r\nexport class Mailbox {\r\n    reSpecCompliantAddr = /(([^<>\\r\\n]+)\\s)?<[^\\r\\n]+>/\r\n    name = ''\r\n    addr = ''\r\n    type: MailboxType = 'To'\r\n\r\n    constructor (input: MailboxAddrObject | string, config: MailboxConfig = { type: 'To' }) {\r\n        this.type = config.type\r\n\r\n        this.parse(input)\r\n    }\r\n\r\n    getAddrDomain (): string {\r\n        if (this.addr.includes('@')) {\r\n            const arr = this.addr.split('@')\r\n            if (arr.length > 1) return arr[1]!\r\n        }\r\n        return ''\r\n    }\r\n\r\n    dump (): string {\r\n        return this.name.length > 0 ? `\"${this.name}\" <${this.addr}>` : `<${this.addr}>`\r\n    }\r\n\r\n    parse (input: MailboxAddrObject | string): this {\r\n        if (this.isMailboxAddrObject(input)) {\r\n            this.addr = input.addr\r\n            if (typeof input.name === 'string') this.name = input.name\r\n            if (typeof input.type === 'string') this.type = input.type\r\n            return this\r\n        }\r\n\r\n        if (this.isMailboxAddrText(input)) {\r\n            const text = input.trim()\r\n            if (text.startsWith('<') && text.endsWith('>')) {\r\n                this.addr = text.slice(1, -1)\r\n                return this\r\n            }\r\n            const arr = text.split(' <') as [string, string]\r\n            arr[0] = /^(\"|')/.test(arr[0]) ? arr[0].slice(1) : arr[0]\r\n            arr[0] = /(\"|')$/.test(arr[0]) ? arr[0].slice(0, -1) : arr[0]\r\n            arr[1] = arr[1].slice(0, -1)\r\n            this.name = arr[0]\r\n            this.addr = arr[1]\r\n            return this\r\n        }\r\n\r\n        if (typeof input === 'string') {\r\n            this.addr = input\r\n            return this\r\n        }\r\n\r\n        throw new MIMETextError('MIMETEXT_INVALID_MAILBOX', 'Couldn\\'t recognize the input.')\r\n    }\r\n\r\n    isMailboxAddrText (v: unknown): boolean {\r\n        return typeof v === 'string' && this.reSpecCompliantAddr.test(v)\r\n    }\r\n\r\n    isMailboxAddrObject (v: unknown): v is MailboxAddrObject {\r\n        return this.isObject(v) && Object.hasOwn(v, 'addr')\r\n    }\r\n\r\n    isObject (v: unknown): v is object {\r\n        return (!!v) && (v.constructor === Object)\r\n    }\r\n}\r\n\r\nexport interface MailboxConfig {\r\n    type: MailboxType\r\n}\r\nexport interface MailboxAddrObject {\r\n    addr: string\r\n    name?: string\r\n    type?: MailboxType\r\n}\r\nexport type MailboxType = 'To' | 'From' | 'Cc' | 'Bcc'\r\n","import type { EnvironmentContext } from \"./MIMEMessage\";\r\nimport { MIMETextError } from \"./MIMETextError.js\";\r\nimport { Mailbox } from \"./Mailbox.js\";\r\n\r\n/*\r\n    Headers are based on: https://www.rfc-editor.org/rfc/rfc4021#section-2.1\r\n    (Some are ignored as they can be added later or as a custom header.)\r\n*/\r\n\r\nexport class MIMEMessageHeader {\r\n    envctx: EnvironmentContext;\r\n    fields: HeaderField[] = [\r\n        {\r\n            name: \"Date\",\r\n            generator: () =>\r\n                new Date().toUTCString().replace(/GMT|UTC/gi, \"+0000\"),\r\n        },\r\n        {\r\n            name: \"From\",\r\n            required: true,\r\n            validate: (v: unknown) => this.validateMailboxSingle(v),\r\n            dump: (v: unknown) => this.dumpMailboxSingle(v),\r\n        },\r\n        {\r\n            name: \"Sender\",\r\n            validate: (v: unknown) => this.validateMailboxSingle(v),\r\n            dump: (v: unknown) => this.dumpMailboxSingle(v),\r\n        },\r\n        {\r\n            name: \"Reply-To\",\r\n            validate: (v: unknown) => this.validateMailboxSingle(v),\r\n            dump: (v: unknown) => this.dumpMailboxSingle(v),\r\n        },\r\n        {\r\n            name: \"To\",\r\n            validate: (v: unknown) => this.validateMailboxMulti(v),\r\n            dump: (v: unknown) => this.dumpMailboxMulti(v),\r\n        },\r\n        {\r\n            name: \"Cc\",\r\n            validate: (v: unknown) => this.validateMailboxMulti(v),\r\n            dump: (v: unknown) => this.dumpMailboxMulti(v),\r\n        },\r\n        {\r\n            name: \"Bcc\",\r\n            validate: (v: unknown) => this.validateMailboxMulti(v),\r\n            dump: (v: unknown) => this.dumpMailboxMulti(v),\r\n        },\r\n        {\r\n            name: \"Message-ID\",\r\n            generator: () => {\r\n                const randomstr = Math.random().toString(36).slice(2);\r\n                const from = this.fields.filter(\r\n                    (obj) => obj.name === \"From\",\r\n                )[0]!.value as Mailbox;\r\n                const domain = from.getAddrDomain();\r\n                return \"<\" + randomstr + \"@\" + domain + \">\";\r\n            },\r\n        },\r\n        {\r\n            name: \"Subject\",\r\n            required: true,\r\n            dump: (v: unknown) => {\r\n                return typeof v === \"string\"\r\n                    ? \"=?utf-8?B?\" + this.envctx.toBase64(v) + \"?=\"\r\n                    : \"\";\r\n            },\r\n        },\r\n        {\r\n            name: \"MIME-Version\",\r\n            generator: () => \"1.0\",\r\n        },\r\n    ];\r\n\r\n    constructor(envctx: EnvironmentContext) {\r\n        this.envctx = envctx;\r\n    }\r\n\r\n    dump(): string {\r\n        let lines = \"\";\r\n\r\n        for (const field of this.fields) {\r\n            if (field.disabled) continue;\r\n            const isValueDefinedByUser =\r\n                field.value !== undefined && field.value !== null;\r\n            if (!isValueDefinedByUser && field.required) {\r\n                throw new MIMETextError(\r\n                    \"MIMETEXT_MISSING_HEADER\",\r\n                    `The \"${field.name}\" header is required.`,\r\n                );\r\n            }\r\n            if (!isValueDefinedByUser && typeof field.generator !== \"function\")\r\n                continue;\r\n            if (!isValueDefinedByUser && typeof field.generator === \"function\")\r\n                field.value = field.generator();\r\n            const strval =\r\n                Object.hasOwn(field, \"dump\") && typeof field.dump === \"function\"\r\n                    ? field.dump(field.value)\r\n                    : typeof field.value === \"string\"\r\n                      ? field.value\r\n                      : \"\";\r\n            lines += `${field.name}: ${strval}${this.envctx.eol}`;\r\n        }\r\n\r\n        return lines.slice(0, -1 * this.envctx.eol.length);\r\n    }\r\n\r\n    toObject(): HeadersObject {\r\n        return this.fields.reduce((memo: HeadersObject, item) => {\r\n            memo[item.name] = item.value;\r\n            return memo;\r\n        }, {});\r\n    }\r\n\r\n    get(name: string): string | Mailbox | Mailbox[] | undefined {\r\n        const fieldMatcher = (obj: HeaderField): boolean =>\r\n            obj.name.toLowerCase() === name.toLowerCase();\r\n        const ind = this.fields.findIndex(fieldMatcher);\r\n\r\n        return ind !== -1 ? this.fields[ind]!.value : undefined;\r\n    }\r\n\r\n    remove(name: string): void {\r\n        const n = name.toLowerCase();\r\n        // @ts-ignore â€“ assumes this.fields exists like in your code sample\r\n        this.fields = this.fields.filter((h: any) => h.name.toLowerCase() !== n);\r\n    }\r\n\r\n    /**\r\n     * Remove several headers at once (case-insensitive).\r\n     */\r\n    removeMany(names: string[]): void {\r\n        const lower = (s: string) => s.toLowerCase();\r\n        const set = new Set(names.map(lower));\r\n        // @ts-ignore\r\n        this.fields = this.fields.filter((h: any) => !set.has(lower(h.name)));\r\n    }\r\n\r\n    /**\r\n     * Does a header exist (case-insensitive)?\r\n     */\r\n    has(name: string): boolean {\r\n        // @ts-ignore\r\n        return this.fields.some((h: any) => lower(h.name) === lower(name));\r\n    }\r\n\r\n    set(name: string, value: string | Mailbox | Mailbox[]): HeaderField {\r\n        const fieldMatcher = (obj: HeaderField): boolean =>\r\n            obj.name.toLowerCase() === name.toLowerCase();\r\n        const isCustomHeader = !this.fields.some(fieldMatcher);\r\n\r\n        if (!isCustomHeader) {\r\n            const ind = this.fields.findIndex(fieldMatcher);\r\n            const field = this.fields[ind]!;\r\n            if (field.validate && !field.validate(value)) {\r\n                throw new MIMETextError(\r\n                    \"MIMETEXT_INVALID_HEADER_VALUE\",\r\n                    `The value for the header \"${name}\" is invalid.`,\r\n                );\r\n            }\r\n            this.fields[ind]!.value = value;\r\n            return this.fields[ind]!;\r\n        }\r\n\r\n        return this.setCustom({\r\n            name: name,\r\n            value: value,\r\n            custom: true,\r\n            dump: (v: unknown) => (typeof v === \"string\" ? v : \"\"),\r\n        });\r\n    }\r\n\r\n    setCustom(obj: HeaderField): HeaderField {\r\n        if (this.isHeaderField(obj)) {\r\n            if (typeof obj.value !== \"string\") {\r\n                throw new MIMETextError(\r\n                    \"MIMETEXT_INVALID_HEADER_FIELD\",\r\n                    \"Custom header must have a value.\",\r\n                );\r\n            }\r\n            this.fields.push(obj);\r\n            return obj;\r\n        }\r\n\r\n        throw new MIMETextError(\r\n            \"MIMETEXT_INVALID_HEADER_FIELD\",\r\n            \"Invalid input for custom header. It must be in type of HeaderField.\",\r\n        );\r\n    }\r\n\r\n    validateMailboxSingle(v: unknown): v is Mailbox {\r\n        return v instanceof Mailbox;\r\n    }\r\n\r\n    validateMailboxMulti(v: unknown): boolean {\r\n        return v instanceof Mailbox || this.isArrayOfMailboxes(v);\r\n    }\r\n\r\n    dumpMailboxMulti(v: unknown): string {\r\n        const dump = (item: Mailbox): string =>\r\n            item.name.length === 0\r\n                ? item.dump()\r\n                : `=?utf-8?B?${this.envctx.toBase64(item.name)}?= <${item.addr}>`;\r\n        return this.isArrayOfMailboxes(v)\r\n            ? v.map(dump).join(`,${this.envctx.eol} `)\r\n            : v instanceof Mailbox\r\n              ? dump(v)\r\n              : \"\";\r\n    }\r\n\r\n    dumpMailboxSingle(v: unknown): string {\r\n        const dump = (item: Mailbox): string =>\r\n            item.name.length === 0\r\n                ? item.dump()\r\n                : `=?utf-8?B?${this.envctx.toBase64(item.name)}?= <${item.addr}>`;\r\n        return v instanceof Mailbox ? dump(v) : \"\";\r\n    }\r\n\r\n    isHeaderField(v: unknown): v is HeaderField {\r\n        const validProps = [\r\n            \"name\",\r\n            \"value\",\r\n            \"dump\",\r\n            \"required\",\r\n            \"disabled\",\r\n            \"generator\",\r\n            \"custom\",\r\n        ];\r\n        if (this.isObject(v)) {\r\n            const h = v as HeaderField;\r\n            if (\r\n                Object.hasOwn(h, \"name\") &&\r\n                typeof h.name === \"string\" &&\r\n                h.name.length > 0\r\n            ) {\r\n                if (\r\n                    !Object.keys(h).some((prop) => !validProps.includes(prop))\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isObject(v: unknown): v is object {\r\n        return !!v && v.constructor === Object;\r\n    }\r\n\r\n    isArrayOfMailboxes(v: unknown): v is Mailbox[] {\r\n        return (\r\n            this.isArray(v) &&\r\n            v.every((item: unknown) => item instanceof Mailbox)\r\n        );\r\n    }\r\n\r\n    isArray(v: unknown): v is never[] {\r\n        return !!v && v.constructor === Array;\r\n    }\r\n\r\n    /**\r\n     * Convenience to strip common fingerprints at once.\r\n     * Call this right before serialization if you want.\r\n     */\r\n    stripFingerprints(headers: string[] = ['Message-ID','Message-Id','X-Mailer','User-Agent']): void {\r\n        this.removeMany(headers);\r\n    }\r\n}\r\n\r\nexport class MIMEMessageContentHeader extends MIMEMessageHeader {\r\n    override fields = [\r\n        {\r\n            name: \"Content-ID\",\r\n        },\r\n        {\r\n            name: \"Content-Type\",\r\n        },\r\n        {\r\n            name: \"Content-Transfer-Encoding\",\r\n        },\r\n        {\r\n            name: \"Content-Disposition\",\r\n        },\r\n    ];\r\n\r\n    constructor(envctx: EnvironmentContext) {\r\n        super(envctx);\r\n    }\r\n}\r\n\r\nexport type HeadersObject = Record<\r\n    string,\r\n    string | Mailbox | Mailbox[] | undefined\r\n>;\r\nexport interface HeaderField {\r\n    name: string;\r\n    dump?: (v: string | Mailbox | Mailbox[] | undefined) => string;\r\n    value?: string | Mailbox | Mailbox[] | undefined;\r\n    validate?: (v: unknown) => boolean;\r\n    required?: boolean;\r\n    disabled?: boolean;\r\n    generator?: () => string;\r\n    custom?: boolean;\r\n}\r\n","import type { EnvironmentContext } from './MIMEMessage'\r\nimport type { Mailbox } from './Mailbox'\r\nimport { type HeadersObject, MIMEMessageContentHeader } from './MIMEMessageHeader.js'\r\n\r\nexport class MIMEMessageContent {\r\n    envctx: EnvironmentContext\r\n    headers\r\n    data\r\n\r\n    constructor (envctx: EnvironmentContext, data: string, headers = {}) {\r\n        this.envctx = envctx\r\n        this.headers = new MIMEMessageContentHeader(this.envctx)\r\n        this.data = data\r\n        this.setHeaders(headers)\r\n    }\r\n\r\n    dump (): string {\r\n        const eol = this.envctx.eol\r\n        return this.headers.dump() + eol + eol + this.data\r\n    }\r\n\r\n    isAttachment (): boolean {\r\n        const disposition = this.headers.get('Content-Disposition')\r\n        return typeof disposition === 'string' && disposition.includes('attachment')\r\n    }\r\n\r\n    isInlineAttachment (): boolean {\r\n        const disposition = this.headers.get('Content-Disposition')\r\n        return typeof disposition === 'string' && disposition.includes('inline')\r\n    }\r\n\r\n    setHeader (name: string, value: string | Mailbox | Mailbox[]): string {\r\n        this.headers.set(name, value)\r\n        return name\r\n    }\r\n\r\n    getHeader (name: string): string | Mailbox | Mailbox[] | undefined {\r\n        return this.headers.get(name)\r\n    }\r\n\r\n    setHeaders (obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\r\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!))\r\n    }\r\n\r\n    getHeaders (): HeadersObject {\r\n        return this.headers.toObject()\r\n    }\r\n}\r\n","import type { MailboxAddrObject, MailboxConfig } from './Mailbox.js'\r\nimport { randomBytes } from 'crypto';\r\nimport { MIMETextError } from './MIMETextError.js'\r\nimport { type HeadersObject, MIMEMessageHeader } from './MIMEMessageHeader.js'\r\nimport { Mailbox } from './Mailbox.js'\r\nimport { MIMEMessageContent } from './MIMEMessageContent.js'\r\n\r\nexport class MIMEMessage {\r\n    envctx: EnvironmentContext\r\n    headers: MIMEMessageHeader\r\n    boundaries: Boundaries = { mixed: '', alt: '', related: '' }\r\n    validTypes = ['text/html', 'text/plain']\r\n    validContentTransferEncodings = ['7bit', '8bit', 'binary', 'quoted-printable', 'base64']\r\n    messages: MIMEMessageContent[] = []\r\n\r\n    constructor (envctx: EnvironmentContext) {\r\n        this.envctx = envctx\r\n        this.headers = new MIMEMessageHeader(this.envctx)\r\n        this.messages = []\r\n\r\n        this.generateBoundaries()\r\n    }\r\n\r\n    asRaw (): string {\r\n        const eol = this.envctx.eol\r\n        const lines = this.headers.dump()\r\n\r\n        const plaintext = this.getMessageByType('text/plain')\r\n        const html = this.getMessageByType('text/html')\r\n        const primaryMessage = html ?? (plaintext ?? undefined)\r\n\r\n        if (primaryMessage === undefined) {\r\n            throw new MIMETextError('MIMETEXT_MISSING_BODY', 'No content added to the message.')\r\n        }\r\n\r\n        const hasAttachments = this.hasAttachments()\r\n        const hasInlineAttachments = this.hasInlineAttachments()\r\n\r\n        const structure = hasInlineAttachments && hasAttachments\r\n            ? 'mixed+related'\r\n            : hasAttachments\r\n                ? 'mixed'\r\n                : hasInlineAttachments\r\n                    ? 'related'\r\n                    : plaintext && html\r\n                        ? 'alternative'\r\n                        : ''\r\n\r\n        if (structure === 'mixed+related') {\r\n            const attachments = this.getAttachments()\r\n                .map((a) => '--' + this.boundaries.mixed + eol + a.dump() + eol + eol)\r\n                .join('')\r\n                .slice(0, -1 * eol.length)\r\n            const inlineAttachments = this.getInlineAttachments()\r\n                .map((a) => '--' + this.boundaries.related + eol + a.dump() + eol + eol)\r\n                .join('')\r\n                .slice(0, -1 * eol.length)\r\n            return lines + eol +\r\n                'Content-Type: multipart/mixed; boundary=' + this.boundaries.mixed + eol +\r\n                eol +\r\n                '--' + this.boundaries.mixed + eol +\r\n                'Content-Type: multipart/related; boundary=' + this.boundaries.related + eol +\r\n                eol +\r\n                this.dumpTextContent(plaintext, html, this.boundaries.related) + eol +\r\n                eol +\r\n                inlineAttachments +\r\n                '--' + this.boundaries.related + '--' + eol +\r\n                attachments +\r\n                '--' + this.boundaries.mixed + '--'\r\n        } else if (structure === 'mixed') {\r\n            const attachments = this.getAttachments()\r\n                .map((a) => '--' + this.boundaries.mixed + eol + a.dump() + eol + eol)\r\n                .join('')\r\n                .slice(0, -1 * eol.length)\r\n            return lines + eol +\r\n                'Content-Type: multipart/mixed; boundary=' + this.boundaries.mixed + eol +\r\n                eol +\r\n                this.dumpTextContent(plaintext, html, this.boundaries.mixed) + eol +\r\n                (plaintext && html ? '' : eol) +\r\n                attachments +\r\n                '--' + this.boundaries.mixed + '--'\r\n        } else if (structure === 'related') {\r\n            const inlineAttachments = this.getInlineAttachments()\r\n                .map((a) => '--' + this.boundaries.related + eol + a.dump() + eol + eol)\r\n                .join('')\r\n                .slice(0, -1 * eol.length)\r\n            return lines + eol +\r\n                'Content-Type: multipart/related; boundary=' + this.boundaries.related + eol +\r\n                eol +\r\n                this.dumpTextContent(plaintext, html, this.boundaries.related) + eol +\r\n                eol +\r\n                inlineAttachments +\r\n                '--' + this.boundaries.related + '--'\r\n        } else if (structure === 'alternative') {\r\n            return lines + eol +\r\n                'Content-Type: multipart/alternative; boundary=' + this.boundaries.alt + eol +\r\n                eol +\r\n                this.dumpTextContent(plaintext, html, this.boundaries.alt) + eol +\r\n                eol +\r\n                '--' + this.boundaries.alt + '--'\r\n        } else {\r\n            return lines + eol + primaryMessage.dump()\r\n        }\r\n    }\r\n\r\n    asEncoded (): string {\r\n        return this.envctx.toBase64WebSafe(this.asRaw())\r\n    }\r\n\r\n    dumpTextContent (plaintext: MIMEMessageContent | undefined, html: MIMEMessageContent | undefined, boundary: string): string {\r\n        const eol = this.envctx.eol\r\n        const primaryMessage = html ?? plaintext\r\n\r\n        let data = ''\r\n\r\n        if (plaintext && html && (this.hasInlineAttachments() || this.hasAttachments())) {\r\n            data = '--' + boundary + eol +\r\n                'Content-Type: multipart/alternative; boundary=' + this.boundaries.alt + eol +\r\n                eol +\r\n                '--' + this.boundaries.alt + eol +\r\n                plaintext.dump() + eol +\r\n                eol +\r\n                '--' + this.boundaries.alt + eol +\r\n                html.dump() + eol +\r\n                eol +\r\n                '--' + this.boundaries.alt + '--'\r\n        } else if (plaintext && html) {\r\n            data = '--' + boundary + eol +\r\n                plaintext.dump() + eol +\r\n                eol +\r\n                '--' + boundary + eol +\r\n                html.dump()\r\n        } else {\r\n            data = '--' + boundary + eol +\r\n                (primaryMessage!).dump()\r\n        }\r\n\r\n        return data\r\n    }\r\n\r\n    hasInlineAttachments (): boolean {\r\n        return this.messages.some((msg) => msg.isInlineAttachment())\r\n    }\r\n\r\n    hasAttachments (): boolean {\r\n        return this.messages.some((msg) => msg.isAttachment())\r\n    }\r\n\r\n    getAttachments (): MIMEMessageContent[] | [] {\r\n        const matcher = (msg: MIMEMessageContent): boolean => msg.isAttachment()\r\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : []\r\n    }\r\n\r\n    getInlineAttachments (): MIMEMessageContent[] | [] {\r\n        const matcher = (msg: MIMEMessageContent): boolean => msg.isInlineAttachment()\r\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : []\r\n    }\r\n\r\n    getMessageByType (type: string): MIMEMessageContent | undefined {\r\n        const matcher = (msg: MIMEMessageContent): boolean => !msg.isAttachment() && !msg.isInlineAttachment() && (msg.getHeader('Content-Type') as string || '').includes(type)\r\n        return this.messages.some(matcher) ? this.messages.filter(matcher)[0] : undefined\r\n    }\r\n\r\n    addAttachment (opts: AttachmentOptions): MIMEMessageContent {\r\n        if (!this.isObject(opts.headers)) opts.headers = {}\r\n\r\n        if (typeof opts.filename !== 'string') {\r\n            throw new MIMETextError('MIMETEXT_MISSING_FILENAME', 'The property \"filename\" must exist while adding attachments.')\r\n        }\r\n\r\n        let type = (opts.headers['Content-Type'] ?? opts.contentType) || 'none'\r\n        if (this.envctx.validateContentType(type) === false) {\r\n            throw new MIMETextError('MIMETEXT_INVALID_MESSAGE_TYPE', `You specified an invalid content type \"${type}\".`)\r\n        }\r\n\r\n        const encoding = (opts.headers['Content-Transfer-Encoding'] ?? opts.encoding) ?? 'base64'\r\n        if (!this.validContentTransferEncodings.includes(encoding)) {\r\n            type = 'application/octet-stream'\r\n        }\r\n\r\n        const contentId = opts.headers['Content-ID']\r\n        if (typeof contentId === 'string' && contentId.length > 2 && !contentId.startsWith('<') && !contentId.endsWith('>')) {\r\n            opts.headers['Content-ID'] = '<' + opts.headers['Content-ID'] + '>'\r\n        }\r\n\r\n        const disposition = opts.inline ? 'inline' : 'attachment'\r\n\r\n        opts.headers = Object.assign({}, opts.headers, {\r\n            'Content-Type': `${type}; name=\"${opts.filename}\"`,\r\n            'Content-Transfer-Encoding': encoding,\r\n            'Content-Disposition': `${disposition}; filename=\"${opts.filename}\"`\r\n        })\r\n\r\n        return this._addMessage({ data: opts.data, headers: opts.headers })\r\n    }\r\n\r\n    addMessage (opts: ContentOptions): MIMEMessageContent {\r\n        if (!this.isObject(opts.headers)) opts.headers = {}\r\n\r\n        let type = (opts.headers['Content-Type'] ?? opts.contentType) || 'none'\r\n        if (!this.validTypes.includes(type)) {\r\n            throw new MIMETextError('MIMETEXT_INVALID_MESSAGE_TYPE', `Valid content types are ${this.validTypes.join(', ')} but you specified \"${type}\".`)\r\n        }\r\n\r\n        const encoding = (opts.headers['Content-Transfer-Encoding'] ?? opts.encoding) ?? '7bit'\r\n        if (!this.validContentTransferEncodings.includes(encoding)) {\r\n            type = 'application/octet-stream'\r\n        }\r\n\r\n        const charset = opts.charset ?? 'UTF-8'\r\n\r\n        opts.headers = Object.assign({}, opts.headers, {\r\n            'Content-Type': `${type}; charset=${charset}`,\r\n            'Content-Transfer-Encoding': encoding\r\n        })\r\n\r\n        return this._addMessage({ data: opts.data, headers: opts.headers })\r\n    }\r\n\r\n    private _addMessage (opts: { data: string, headers: ContentHeaders }): MIMEMessageContent {\r\n        const msg = new MIMEMessageContent(this.envctx, opts.data, opts.headers)\r\n\r\n        this.messages.push(msg)\r\n\r\n        return msg\r\n    }\r\n\r\n    setSender (input: MailboxAddrObject | string, config: MailboxConfig = { type: 'From' }): Mailbox {\r\n        const mailbox = new Mailbox(input, config)\r\n        this.setHeader('From', mailbox)\r\n        return mailbox\r\n    }\r\n\r\n    getSender (): Mailbox | undefined {\r\n        return this.getHeader('From') as Mailbox\r\n    }\r\n\r\n    setRecipients (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\r\n        const arr = !this.isArray(input) ? [input] : input\r\n        const recs = arr.map((_input) => new Mailbox(_input, config))\r\n        this.setHeader(config.type, recs)\r\n        return recs\r\n    }\r\n\r\n    getRecipients (config: MailboxConfig = { type: 'To' }): Mailbox | Mailbox[] | undefined {\r\n        return this.getHeader(config.type) as Mailbox | Mailbox[] | undefined\r\n    }\r\n\r\n    setRecipient (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\r\n        return this.setRecipients(input, config)\r\n    }\r\n\r\n    setTo (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\r\n        return this.setRecipients(input, config)\r\n    }\r\n\r\n    setCc (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'Cc' }): Mailbox[] {\r\n        return this.setRecipients(input, config)\r\n    }\r\n\r\n    setBcc (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'Bcc' }): Mailbox[] {\r\n        return this.setRecipients(input, config)\r\n    }\r\n\r\n    setSubject (value: string): string {\r\n        this.setHeader('subject', value)\r\n        return value\r\n    }\r\n\r\n    getSubject (): string | undefined {\r\n        return this.getHeader('subject') as string\r\n    }\r\n\r\n    setHeader (name: string, value: string | Mailbox | Mailbox[]): string {\r\n        this.headers.set(name, value)\r\n        return name\r\n    }\r\n\r\n    getHeader (name: string): string | Mailbox | Mailbox[] | undefined {\r\n        return this.headers.get(name)\r\n    }\r\n\r\n    setHeaders (obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\r\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!))\r\n    }\r\n\r\n    getHeaders (): HeadersObject {\r\n        return this.headers.toObject()\r\n    }\r\n\r\n    toBase64 (v: string): string {\r\n        return this.envctx.toBase64(v)\r\n    }\r\n\r\n    toBase64WebSafe (v: string): string {\r\n        return this.envctx.toBase64WebSafe(v)\r\n    }\r\n\r\n    generateBoundaries (): void {\r\n        const gmailishBoundary = (): string => {\r\n            const hex = (n: number) => randomBytes(n).toString('hex'); // lowercase\r\n            return '000000000000' + hex(8) + hex(3);\r\n        }\r\n        this.boundaries = {\r\n            mixed: gmailishBoundary(),\r\n            alt: gmailishBoundary(),\r\n            related: gmailishBoundary()\r\n        }\r\n    }\r\n\r\n    isArray (v: unknown): v is unknown[] {\r\n        return (!!v) && (v.constructor === Array)\r\n    }\r\n\r\n    isObject (v: unknown): v is object {\r\n        return (!!v) && (v.constructor === Object)\r\n    }\r\n}\r\n\r\nexport interface EnvironmentContext {\r\n    toBase64: (v: string) => string\r\n    toBase64WebSafe: (v: string) => string\r\n    eol: string\r\n    validateContentType: (v: string) => string | false\r\n}\r\n\r\nexport interface Boundaries {\r\n    mixed: string\r\n    alt: string\r\n    related: string\r\n}\r\n\r\nexport type ContentTransferEncoding = '7bit' | '8bit' | 'binary' | 'quoted-printable' | 'base64'\r\n\r\nexport interface ContentHeaders {\r\n    'Content-Type'?: string\r\n    'Content-Transfer-Encoding'?: ContentTransferEncoding\r\n    'Content-Disposition'?: string\r\n    'Content-ID'?: string\r\n    [index: string]: string | undefined\r\n}\r\n\r\nexport interface ContentOptions {\r\n    data: string\r\n    encoding?: ContentTransferEncoding\r\n    contentType: string\r\n    headers?: ContentHeaders\r\n    charset?: string\r\n}\r\n\r\nexport interface AttachmentOptions extends ContentOptions {\r\n    inline?: boolean\r\n    filename: string\r\n}\r\n","import { EOL } from 'node:os'\r\nimport * as mime from 'mime-types'\r\nimport { MIMEMessage } from '../MIMEMessage.js'\r\n\r\nconst envctx = {\r\n    toBase64: function toBase64 (data: string) {\r\n        return (Buffer.from(data)).toString('base64')\r\n    },\r\n    toBase64WebSafe: function toBase64WebSafe (data: string) {\r\n        return (Buffer.from(data)).toString('base64')\r\n            .replace(/\\+/g, '-')\r\n            .replace(/\\//g, '_')\r\n            .replace(/=+$/, '')\r\n    },\r\n    eol: EOL,\r\n    validateContentType: (v: string): string | false => {\r\n        return mime.contentType(v)\r\n    }\r\n}\r\n\r\nexport function createMimeMessage (): MIMEMessage {\r\n    return new MIMEMessage(envctx)\r\n}\r\n\r\nexport { MIMEMessage } from '../MIMEMessage.js'\r\nexport { Mailbox } from '../Mailbox.js'\r\nexport { MIMETextError } from '../MIMETextError.js'\r\nexport { MIMEMessageHeader } from '../MIMEMessageHeader.js'\r\nexport { MIMEMessageContent } from '../MIMEMessageContent.js'\r\n\r\nexport type * from '../MIMEMessage.js'\r\nexport type * from '../Mailbox.js'\r\nexport type * from '../MIMETextError.js'\r\nexport type * from '../MIMEMessageHeader.js'\r\nexport type * from '../MIMEMessageContent.js'\r\n"],"names":["MIMETextError","Error","name","description","constructor","message","super","this","Mailbox","reSpecCompliantAddr","addr","type","input","config","parse","getAddrDomain","includes","arr","split","length","dump","isMailboxAddrObject","isMailboxAddrText","text","_trimInstanceProperty","call","startsWith","endsWith","slice","test","v","isObject","Object","hasOwn","MIMEMessageHeader","fields","generator","Date","toUTCString","replace","required","validate","validateMailboxSingle","dumpMailboxSingle","validateMailboxMulti","dumpMailboxMulti","Math","random","toString","filter","obj","value","envctx","toBase64","lines","field","disabled","isValueDefinedByUser","undefined","strval","eol","toObject","reduce","memo","item","get","ind","findIndex","toLowerCase","remove","n","h","removeMany","names","lower","s","set","Set","map","has","some","fieldMatcher","setCustom","custom","isHeaderField","push","isArrayOfMailboxes","join","validProps","keys","prop","isArray","every","Array","stripFingerprints","headers","MIMEMessageContentHeader","MIMEMessageContent","data","setHeaders","isAttachment","disposition","isInlineAttachment","setHeader","getHeader","getHeaders","MIMEMessage","boundaries","mixed","alt","related","validTypes","validContentTransferEncodings","messages","generateBoundaries","asRaw","plaintext","getMessageByType","html","primaryMessage","hasAttachments","hasInlineAttachments","structure","attachments","getAttachments","a","inlineAttachments","getInlineAttachments","dumpTextContent","asEncoded","toBase64WebSafe","boundary","msg","matcher","addAttachment","opts","filename","contentType","validateContentType","encoding","contentId","inline","assign","_addMessage","addMessage","charset","setSender","mailbox","getSender","setRecipients","recs","_input","getRecipients","setRecipient","setTo","setCc","setBcc","setSubject","getSubject","gmailishBoundary","hex","randomBytes","Buffer","from","EOL","mime","createMimeMessage"],"mappings":"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"}