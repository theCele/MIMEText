{"version":3,"file":"mimetext.node.cjs.js","sources":["../src/MIMETextError.ts","../src/Mailbox.ts","../src/MIMEMessageHeader.ts","../src/MIMEMessageContent.ts","../src/MIMEMessage.ts","../src/entrypoints/node.ts"],"sourcesContent":["export class MIMETextError extends Error {\r\n    override name = ''\r\n    description = ''\r\n\r\n    constructor (message: string, description = '') {\r\n        super(description)\r\n\r\n        this.name = message\r\n        this.description = description\r\n    }\r\n}\r\n","import { MIMETextError } from './MIMETextError.js'\r\n\r\nexport class Mailbox {\r\n    reSpecCompliantAddr = /(([^<>\\r\\n]+)\\s)?<[^\\r\\n]+>/\r\n    name = ''\r\n    addr = ''\r\n    type: MailboxType = 'To'\r\n\r\n    constructor (input: MailboxAddrObject | string, config: MailboxConfig = { type: 'To' }) {\r\n        this.type = config.type\r\n\r\n        this.parse(input)\r\n    }\r\n\r\n    getAddrDomain (): string {\r\n        if (this.addr.includes('@')) {\r\n            const arr = this.addr.split('@')\r\n            if (arr.length > 1) return arr[1]!\r\n        }\r\n        return ''\r\n    }\r\n\r\n    dump (): string {\r\n        return this.name.length > 0 ? `\"${this.name}\" <${this.addr}>` : `<${this.addr}>`\r\n    }\r\n\r\n    parse (input: MailboxAddrObject | string): this {\r\n        if (this.isMailboxAddrObject(input)) {\r\n            this.addr = input.addr\r\n            if (typeof input.name === 'string') this.name = input.name\r\n            if (typeof input.type === 'string') this.type = input.type\r\n            return this\r\n        }\r\n\r\n        if (this.isMailboxAddrText(input)) {\r\n            const text = input.trim()\r\n            if (text.startsWith('<') && text.endsWith('>')) {\r\n                this.addr = text.slice(1, -1)\r\n                return this\r\n            }\r\n            const arr = text.split(' <') as [string, string]\r\n            arr[0] = /^(\"|')/.test(arr[0]) ? arr[0].slice(1) : arr[0]\r\n            arr[0] = /(\"|')$/.test(arr[0]) ? arr[0].slice(0, -1) : arr[0]\r\n            arr[1] = arr[1].slice(0, -1)\r\n            this.name = arr[0]\r\n            this.addr = arr[1]\r\n            return this\r\n        }\r\n\r\n        if (typeof input === 'string') {\r\n            this.addr = input\r\n            return this\r\n        }\r\n\r\n        throw new MIMETextError('MIMETEXT_INVALID_MAILBOX', 'Couldn\\'t recognize the input.')\r\n    }\r\n\r\n    isMailboxAddrText (v: unknown): boolean {\r\n        return typeof v === 'string' && this.reSpecCompliantAddr.test(v)\r\n    }\r\n\r\n    isMailboxAddrObject (v: unknown): v is MailboxAddrObject {\r\n        return this.isObject(v) && Object.hasOwn(v, 'addr')\r\n    }\r\n\r\n    isObject (v: unknown): v is object {\r\n        return (!!v) && (v.constructor === Object)\r\n    }\r\n}\r\n\r\nexport interface MailboxConfig {\r\n    type: MailboxType\r\n}\r\nexport interface MailboxAddrObject {\r\n    addr: string\r\n    name?: string\r\n    type?: MailboxType\r\n}\r\nexport type MailboxType = 'To' | 'From' | 'Cc' | 'Bcc'\r\n","import type { EnvironmentContext } from \"./MIMEMessage\";\nimport { MIMETextError } from \"./MIMETextError.js\";\nimport { Mailbox } from \"./Mailbox.js\";\n\n/*\n    Headers are based on: https://www.rfc-editor.org/rfc/rfc4021#section-2.1\n    (Some are ignored as they can be added later or as a custom header.)\n*/\n\nexport class MIMEMessageHeader {\n    envctx: EnvironmentContext;\n    fields: HeaderField[] = [\n        {\n            name: \"Date\",\n            generator: () =>\n                new Date().toUTCString().replace(/GMT|UTC/gi, \"+0000\"),\n        },\n        {\n            name: \"From\",\n            required: true,\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v),\n        },\n        {\n            name: \"Sender\",\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v),\n        },\n        {\n            name: \"Reply-To\",\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v),\n        },\n        {\n            name: \"To\",\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v),\n        },\n        {\n            name: \"Cc\",\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v),\n        },\n        {\n            name: \"Bcc\",\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v),\n        },\n        {\n            name: \"Message-ID\",\n            generator: () => {\n                const randomstr = `${Math.random().toString(36).slice(2)}${Math.random().toString(36).slice(2)}`;\n                const from = this.fields.filter(\n                    (obj) => obj.name === \"From\",\n                )[0]!.value as Mailbox;\n                const domain = from.getAddrDomain();\n                return \"<\" + randomstr + \"@\" + domain + \">\";\n            },\n        },\n        {\n            name: \"Subject\",\n            required: true,\n            dump: (v: unknown) => {\n                return typeof v === \"string\"\n                    ? \"=?utf-8?B?\" + this.envctx.toBase64(v) + \"?=\"\n                    : \"\";\n            },\n        },\n        {\n            name: \"MIME-Version\",\n            generator: () => \"1.0\",\n        },\n    ];\n\n    constructor(envctx: EnvironmentContext) {\n        this.envctx = envctx;\n    }\n\n    dump(): string {\n        let lines = \"\";\n\n        for (const field of this.fields) {\n            if (field.disabled) continue;\n            const isValueDefinedByUser =\n                field.value !== undefined && field.value !== null;\n            if (!isValueDefinedByUser && field.required) {\n                throw new MIMETextError(\n                    \"MIMETEXT_MISSING_HEADER\",\n                    `The \"${field.name}\" header is required.`,\n                );\n            }\n            if (!isValueDefinedByUser && typeof field.generator !== \"function\")\n                continue;\n            if (!isValueDefinedByUser && typeof field.generator === \"function\")\n                field.value = field.generator();\n            const strval =\n                Object.hasOwn(field, \"dump\") && typeof field.dump === \"function\"\n                    ? field.dump(field.value)\n                    : typeof field.value === \"string\"\n                      ? field.value\n                      : \"\";\n            lines += `${field.name}: ${strval}${this.envctx.eol}`;\n        }\n\n        return lines.slice(0, -1 * this.envctx.eol.length);\n    }\n\n    toObject(): HeadersObject {\n        return this.fields.reduce((memo: HeadersObject, item) => {\n            memo[item.name] = item.value;\n            return memo;\n        }, {});\n    }\n\n    get(name: string): string | Mailbox | Mailbox[] | undefined {\n        const fieldMatcher = (obj: HeaderField): boolean =>\n            obj.name.toLowerCase() === name.toLowerCase();\n        const ind = this.fields.findIndex(fieldMatcher);\n\n        return ind !== -1 ? this.fields[ind]!.value : undefined;\n    }\n\n    remove(name: string): void {\n        const n = name.toLowerCase();\n        // @ts-ignore â€“ assumes this.fields exists like in your code sample\n        this.fields = this.fields.filter(\n            (h: any) => h.name.toLowerCase() !== n,\n        );\n    }\n\n    /**\n     * Remove several headers at once (case-insensitive).\n     */\n    removeMany(names: string[]): void {\n        const lower = (s: string) => s.toLowerCase();\n        const set = new Set(names.map(lower));\n        // @ts-ignore\n        this.fields = this.fields.filter((h: any) => !set.has(lower(h.name)));\n    }\n\n    /**\n     * Does a header exist (case-insensitive)?\n     */\n    has(name: string): boolean {\n        // @ts-ignore\n        return this.fields.some((h: any) => lower(h.name) === lower(name));\n    }\n\n    set(name: string, value: string | Mailbox | Mailbox[]): HeaderField {\n        const fieldMatcher = (obj: HeaderField): boolean =>\n            obj.name.toLowerCase() === name.toLowerCase();\n        const isCustomHeader = !this.fields.some(fieldMatcher);\n\n        if (!isCustomHeader) {\n            const ind = this.fields.findIndex(fieldMatcher);\n            const field = this.fields[ind]!;\n            if (field.validate && !field.validate(value)) {\n                throw new MIMETextError(\n                    \"MIMETEXT_INVALID_HEADER_VALUE\",\n                    `The value for the header \"${name}\" is invalid.`,\n                );\n            }\n            this.fields[ind]!.value = value;\n            return this.fields[ind]!;\n        }\n\n        return this.setCustom({\n            name: name,\n            value: value,\n            custom: true,\n            dump: (v: unknown) => (typeof v === \"string\" ? v : \"\"),\n        });\n    }\n\n    setCustom(obj: HeaderField): HeaderField {\n        if (this.isHeaderField(obj)) {\n            if (typeof obj.value !== \"string\") {\n                throw new MIMETextError(\n                    \"MIMETEXT_INVALID_HEADER_FIELD\",\n                    \"Custom header must have a value.\",\n                );\n            }\n            this.fields.push(obj);\n            return obj;\n        }\n\n        throw new MIMETextError(\n            \"MIMETEXT_INVALID_HEADER_FIELD\",\n            \"Invalid input for custom header. It must be in type of HeaderField.\",\n        );\n    }\n\n    validateMailboxSingle(v: unknown): v is Mailbox {\n        return v instanceof Mailbox;\n    }\n\n    validateMailboxMulti(v: unknown): boolean {\n        return v instanceof Mailbox || this.isArrayOfMailboxes(v);\n    }\n\n    dumpMailboxMulti(v: unknown): string {\n        const dump = (item: Mailbox): string =>\n            item.name.length === 0\n                ? item.dump()\n                : `=?utf-8?B?${this.envctx.toBase64(item.name)}?= <${item.addr}>`;\n        return this.isArrayOfMailboxes(v)\n            ? v.map(dump).join(`,${this.envctx.eol} `)\n            : v instanceof Mailbox\n              ? dump(v)\n              : \"\";\n    }\n\n    dumpMailboxSingle(v: unknown): string {\n        const dump = (item: Mailbox): string =>\n            item.name.length === 0\n                ? item.dump()\n                : `=?utf-8?B?${this.envctx.toBase64(item.name)}?= <${item.addr}>`;\n        return v instanceof Mailbox ? dump(v) : \"\";\n    }\n\n    isHeaderField(v: unknown): v is HeaderField {\n        const validProps = [\n            \"name\",\n            \"value\",\n            \"dump\",\n            \"required\",\n            \"disabled\",\n            \"generator\",\n            \"custom\",\n        ];\n        if (this.isObject(v)) {\n            const h = v as HeaderField;\n            if (\n                Object.hasOwn(h, \"name\") &&\n                typeof h.name === \"string\" &&\n                h.name.length > 0\n            ) {\n                if (\n                    !Object.keys(h).some((prop) => !validProps.includes(prop))\n                ) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    isObject(v: unknown): v is object {\n        return !!v && v.constructor === Object;\n    }\n\n    isArrayOfMailboxes(v: unknown): v is Mailbox[] {\n        return (\n            this.isArray(v) &&\n            v.every((item: unknown) => item instanceof Mailbox)\n        );\n    }\n\n    isArray(v: unknown): v is never[] {\n        return !!v && v.constructor === Array;\n    }\n}\n\nexport class MIMEMessageContentHeader extends MIMEMessageHeader {\n    override fields = [\n        {\n            name: \"Content-ID\",\n        },\n        {\n            name: \"Content-Type\",\n        },\n        {\n            name: \"Content-Transfer-Encoding\",\n        },\n        {\n            name: \"Content-Disposition\",\n        },\n    ];\n\n    constructor(envctx: EnvironmentContext) {\n        super(envctx);\n    }\n}\n\nexport type HeadersObject = Record<\n    string,\n    string | Mailbox | Mailbox[] | undefined\n>;\nexport interface HeaderField {\n    name: string;\n    dump?: (v: string | Mailbox | Mailbox[] | undefined) => string;\n    value?: string | Mailbox | Mailbox[] | undefined;\n    validate?: (v: unknown) => boolean;\n    required?: boolean;\n    disabled?: boolean;\n    generator?: () => string;\n    custom?: boolean;\n}\n","import type { EnvironmentContext } from './MIMEMessage'\r\nimport type { Mailbox } from './Mailbox'\r\nimport { type HeadersObject, MIMEMessageContentHeader } from './MIMEMessageHeader.js'\r\n\r\nexport class MIMEMessageContent {\r\n    envctx: EnvironmentContext\r\n    headers\r\n    data\r\n\r\n    constructor (envctx: EnvironmentContext, data: string, headers = {}) {\r\n        this.envctx = envctx\r\n        this.headers = new MIMEMessageContentHeader(this.envctx)\r\n        this.data = data\r\n        this.setHeaders(headers)\r\n    }\r\n\r\n    dump (): string {\r\n        const eol = this.envctx.eol\r\n        return this.headers.dump() + eol + eol + this.data\r\n    }\r\n\r\n    isAttachment (): boolean {\r\n        const disposition = this.headers.get('Content-Disposition')\r\n        return typeof disposition === 'string' && disposition.includes('attachment')\r\n    }\r\n\r\n    isInlineAttachment (): boolean {\r\n        const disposition = this.headers.get('Content-Disposition')\r\n        return typeof disposition === 'string' && disposition.includes('inline')\r\n    }\r\n\r\n    setHeader (name: string, value: string | Mailbox | Mailbox[]): string {\r\n        this.headers.set(name, value)\r\n        return name\r\n    }\r\n\r\n    getHeader (name: string): string | Mailbox | Mailbox[] | undefined {\r\n        return this.headers.get(name)\r\n    }\r\n\r\n    setHeaders (obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\r\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!))\r\n    }\r\n\r\n    getHeaders (): HeadersObject {\r\n        return this.headers.toObject()\r\n    }\r\n}\r\n","import type { MailboxAddrObject, MailboxConfig } from \"./Mailbox.js\";\nimport { randomBytes } from \"crypto\";\nimport { MIMETextError } from \"./MIMETextError.js\";\nimport { type HeadersObject, MIMEMessageHeader } from \"./MIMEMessageHeader.js\";\nimport { Mailbox } from \"./Mailbox.js\";\nimport { MIMEMessageContent } from \"./MIMEMessageContent.js\";\n\nexport class MIMEMessage {\n    envctx: EnvironmentContext;\n    headers: MIMEMessageHeader;\n    boundaries: Boundaries = { mixed: \"\", alt: \"\", related: \"\" };\n    validTypes = [\"text/html\", \"text/plain\"];\n    validContentTransferEncodings = [\n        \"7bit\",\n        \"8bit\",\n        \"binary\",\n        \"quoted-printable\",\n        \"base64\",\n    ];\n    messages: MIMEMessageContent[] = [];\n\n    constructor(envctx: EnvironmentContext) {\n        this.envctx = envctx;\n        this.headers = new MIMEMessageHeader(this.envctx);\n        this.messages = [];\n\n        this.generateBoundaries();\n    }\n\n    asRaw(): string {\n        const eol = this.envctx.eol;\n        const lines = this.headers.dump();\n\n        const plaintext = this.getMessageByType(\"text/plain\");\n        const html = this.getMessageByType(\"text/html\");\n        const primaryMessage = html ?? plaintext ?? undefined;\n\n        if (primaryMessage === undefined) {\n            throw new MIMETextError(\n                \"MIMETEXT_MISSING_BODY\",\n                \"No content added to the message.\",\n            );\n        }\n\n        const hasAttachments = this.hasAttachments();\n        const hasInlineAttachments = this.hasInlineAttachments();\n\n        const structure =\n            hasInlineAttachments && hasAttachments\n                ? \"mixed+related\"\n                : hasAttachments\n                  ? \"mixed\"\n                  : hasInlineAttachments\n                    ? \"related\"\n                    : plaintext && html\n                      ? \"alternative\"\n                      : \"\";\n\n        if (structure === \"mixed+related\") {\n            const attachments = this.getAttachments()\n                .map(\n                    (a) =>\n                        \"--\" +\n                        this.boundaries.mixed +\n                        eol +\n                        a.dump() +\n                        eol +\n                        eol,\n                )\n                .join(\"\")\n                .slice(0, -1 * eol.length);\n            const inlineAttachments = this.getInlineAttachments()\n                .map(\n                    (a) =>\n                        \"--\" +\n                        this.boundaries.related +\n                        eol +\n                        a.dump() +\n                        eol +\n                        eol,\n                )\n                .join(\"\")\n                .slice(0, -1 * eol.length);\n            return (\n                lines +\n                eol +\n                \"Content-Type: multipart/mixed; boundary=\" +\n                this.boundaries.mixed +\n                eol +\n                eol +\n                \"--\" +\n                this.boundaries.mixed +\n                eol +\n                \"Content-Type: multipart/related; boundary=\" +\n                this.boundaries.related +\n                eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.related) +\n                eol +\n                eol +\n                inlineAttachments +\n                \"--\" +\n                this.boundaries.related +\n                \"--\" +\n                eol +\n                attachments +\n                \"--\" +\n                this.boundaries.mixed +\n                \"--\"\n            );\n        } else if (structure === \"mixed\") {\n            const attachments = this.getAttachments()\n                .map(\n                    (a) =>\n                        \"--\" +\n                        this.boundaries.mixed +\n                        eol +\n                        a.dump() +\n                        eol +\n                        eol,\n                )\n                .join(\"\")\n                .slice(0, -1 * eol.length);\n            return (\n                lines +\n                eol +\n                \"Content-Type: multipart/mixed; boundary=\" +\n                this.boundaries.mixed +\n                eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.mixed) +\n                eol +\n                (plaintext && html ? \"\" : eol) +\n                attachments +\n                \"--\" +\n                this.boundaries.mixed +\n                \"--\"\n            );\n        } else if (structure === \"related\") {\n            const inlineAttachments = this.getInlineAttachments()\n                .map(\n                    (a) =>\n                        \"--\" +\n                        this.boundaries.related +\n                        eol +\n                        a.dump() +\n                        eol +\n                        eol,\n                )\n                .join(\"\")\n                .slice(0, -1 * eol.length);\n            return (\n                lines +\n                eol +\n                \"Content-Type: multipart/related; boundary=\" +\n                this.boundaries.related +\n                eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.related) +\n                eol +\n                eol +\n                inlineAttachments +\n                \"--\" +\n                this.boundaries.related +\n                \"--\"\n            );\n        } else if (structure === \"alternative\") {\n            return (\n                lines +\n                eol +\n                \"Content-Type: multipart/alternative; boundary=\" +\n                this.boundaries.alt +\n                eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.alt) +\n                eol +\n                eol +\n                \"--\" +\n                this.boundaries.alt +\n                \"--\"\n            );\n        } else {\n            return lines + eol + primaryMessage.dump();\n        }\n    }\n\n    asEncoded(): string {\n        return this.envctx.toBase64WebSafe(this.asRaw());\n    }\n\n    dumpTextContent(\n        plaintext: MIMEMessageContent | undefined,\n        html: MIMEMessageContent | undefined,\n        boundary: string,\n    ): string {\n        const eol = this.envctx.eol;\n        const primaryMessage = html ?? plaintext;\n\n        let data = \"\";\n\n        if (\n            plaintext &&\n            html &&\n            (this.hasInlineAttachments() || this.hasAttachments())\n        ) {\n            data =\n                \"--\" +\n                boundary +\n                eol +\n                \"Content-Type: multipart/alternative; boundary=\" +\n                this.boundaries.alt +\n                eol +\n                eol +\n                \"--\" +\n                this.boundaries.alt +\n                eol +\n                plaintext.dump() +\n                eol +\n                eol +\n                \"--\" +\n                this.boundaries.alt +\n                eol +\n                html.dump() +\n                eol +\n                eol +\n                \"--\" +\n                this.boundaries.alt +\n                \"--\";\n        } else if (plaintext && html) {\n            data =\n                \"--\" +\n                boundary +\n                eol +\n                plaintext.dump() +\n                eol +\n                eol +\n                \"--\" +\n                boundary +\n                eol +\n                html.dump();\n        } else {\n            data = \"--\" + boundary + eol + primaryMessage!.dump();\n        }\n\n        return data;\n    }\n\n    hasInlineAttachments(): boolean {\n        return this.messages.some((msg) => msg.isInlineAttachment());\n    }\n\n    hasAttachments(): boolean {\n        return this.messages.some((msg) => msg.isAttachment());\n    }\n\n    getAttachments(): MIMEMessageContent[] | [] {\n        const matcher = (msg: MIMEMessageContent): boolean =>\n            msg.isAttachment();\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : [];\n    }\n\n    getInlineAttachments(): MIMEMessageContent[] | [] {\n        const matcher = (msg: MIMEMessageContent): boolean =>\n            msg.isInlineAttachment();\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : [];\n    }\n\n    getMessageByType(type: string): MIMEMessageContent | undefined {\n        const matcher = (msg: MIMEMessageContent): boolean =>\n            !msg.isAttachment() &&\n            !msg.isInlineAttachment() &&\n            ((msg.getHeader(\"Content-Type\") as string) || \"\").includes(type);\n        return this.messages.some(matcher)\n            ? this.messages.filter(matcher)[0]\n            : undefined;\n    }\n\n    addAttachment(opts: AttachmentOptions): MIMEMessageContent {\n        if (!this.isObject(opts.headers)) opts.headers = {};\n\n        if (typeof opts.filename !== \"string\") {\n            throw new MIMETextError(\n                \"MIMETEXT_MISSING_FILENAME\",\n                'The property \"filename\" must exist while adding attachments.',\n            );\n        }\n\n        let type = (opts.headers[\"Content-Type\"] ?? opts.contentType) || \"none\";\n        if (this.envctx.validateContentType(type) === false) {\n            throw new MIMETextError(\n                \"MIMETEXT_INVALID_MESSAGE_TYPE\",\n                `You specified an invalid content type \"${type}\".`,\n            );\n        }\n\n        const encoding =\n            opts.headers[\"Content-Transfer-Encoding\"] ??\n            opts.encoding ??\n            \"base64\";\n        if (!this.validContentTransferEncodings.includes(encoding)) {\n            type = \"application/octet-stream\";\n        }\n\n        const contentId = opts.headers[\"Content-ID\"];\n        if (\n            typeof contentId === \"string\" &&\n            contentId.length > 2 &&\n            !contentId.startsWith(\"<\") &&\n            !contentId.endsWith(\">\")\n        ) {\n            opts.headers[\"Content-ID\"] = \"<\" + opts.headers[\"Content-ID\"] + \">\";\n        }\n\n        const disposition = opts.inline ? \"inline\" : \"attachment\";\n\n        opts.headers = Object.assign({}, opts.headers, {\n            \"Content-Type\": `${type}; name=\"${opts.filename}\"`,\n            \"Content-Transfer-Encoding\": encoding,\n            \"Content-Disposition\": `${disposition}; filename=\"${opts.filename}\"`,\n        });\n\n        return this._addMessage({ data: opts.data, headers: opts.headers });\n    }\n\n    addMessage(opts: ContentOptions): MIMEMessageContent {\n        if (!this.isObject(opts.headers)) opts.headers = {};\n\n        let type = (opts.headers[\"Content-Type\"] ?? opts.contentType) || \"none\";\n        if (!this.validTypes.includes(type)) {\n            throw new MIMETextError(\n                \"MIMETEXT_INVALID_MESSAGE_TYPE\",\n                `Valid content types are ${this.validTypes.join(\", \")} but you specified \"${type}\".`,\n            );\n        }\n\n        const encoding =\n            opts.headers[\"Content-Transfer-Encoding\"] ??\n            opts.encoding ??\n            \"7bit\";\n        if (!this.validContentTransferEncodings.includes(encoding)) {\n            type = \"application/octet-stream\";\n        }\n\n        const charset = opts.charset ?? \"UTF-8\";\n\n        opts.headers = Object.assign({}, opts.headers, {\n            \"Content-Type\": `${type}; charset=${charset}`,\n            \"Content-Transfer-Encoding\": encoding,\n        });\n\n        return this._addMessage({ data: opts.data, headers: opts.headers });\n    }\n\n    private _addMessage(opts: {\n        data: string;\n        headers: ContentHeaders;\n    }): MIMEMessageContent {\n        const msg = new MIMEMessageContent(\n            this.envctx,\n            opts.data,\n            opts.headers,\n        );\n\n        this.messages.push(msg);\n\n        return msg;\n    }\n\n    setSender(\n        input: MailboxAddrObject | string,\n        config: MailboxConfig = { type: \"From\" },\n    ): Mailbox {\n        const mailbox = new Mailbox(input, config);\n        this.setHeader(\"From\", mailbox);\n        return mailbox;\n    }\n\n    getSender(): Mailbox | undefined {\n        return this.getHeader(\"From\") as Mailbox;\n    }\n\n    setRecipients(\n        input: MailboxAddrObject | string | MailboxAddrObject[] | string[],\n        config: MailboxConfig = { type: \"To\" },\n    ): Mailbox[] {\n        const arr = !this.isArray(input) ? [input] : input;\n        const recs = arr.map((_input) => new Mailbox(_input, config));\n        this.setHeader(config.type, recs);\n        return recs;\n    }\n\n    getRecipients(\n        config: MailboxConfig = { type: \"To\" },\n    ): Mailbox | Mailbox[] | undefined {\n        return this.getHeader(config.type) as Mailbox | Mailbox[] | undefined;\n    }\n\n    setRecipient(\n        input: MailboxAddrObject | string | MailboxAddrObject[] | string[],\n        config: MailboxConfig = { type: \"To\" },\n    ): Mailbox[] {\n        return this.setRecipients(input, config);\n    }\n\n    setTo(\n        input: MailboxAddrObject | string | MailboxAddrObject[] | string[],\n        config: MailboxConfig = { type: \"To\" },\n    ): Mailbox[] {\n        return this.setRecipients(input, config);\n    }\n\n    setCc(\n        input: MailboxAddrObject | string | MailboxAddrObject[] | string[],\n        config: MailboxConfig = { type: \"Cc\" },\n    ): Mailbox[] {\n        return this.setRecipients(input, config);\n    }\n\n    setBcc(\n        input: MailboxAddrObject | string | MailboxAddrObject[] | string[],\n        config: MailboxConfig = { type: \"Bcc\" },\n    ): Mailbox[] {\n        return this.setRecipients(input, config);\n    }\n\n    setSubject(value: string): string {\n        this.setHeader(\"subject\", value);\n        return value;\n    }\n\n    getSubject(): string | undefined {\n        return this.getHeader(\"subject\") as string;\n    }\n\n    setHeader(name: string, value: string | Mailbox | Mailbox[]): string {\n        this.headers.set(name, value);\n        return name;\n    }\n\n    getHeader(name: string): string | Mailbox | Mailbox[] | undefined {\n        return this.headers.get(name);\n    }\n\n    setHeaders(obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!));\n    }\n\n    getHeaders(): HeadersObject {\n        return this.headers.toObject();\n    }\n\n    toBase64(v: string): string {\n        return this.envctx.toBase64(v);\n    }\n\n    toBase64WebSafe(v: string): string {\n        return this.envctx.toBase64WebSafe(v);\n    }\n\n    generateBoundaries(): void {\n        const gmailishBoundary = (): string => {\n            const hex = (n: number) => randomBytes(n).toString(\"hex\"); // lowercase\n            return \"000000000000\" + hex(8) + hex(3);\n        };\n        this.boundaries = {\n            mixed: gmailishBoundary(),\n            alt: gmailishBoundary(),\n            related: gmailishBoundary(),\n        };\n    }\n\n    isArray(v: unknown): v is unknown[] {\n        return !!v && v.constructor === Array;\n    }\n\n    isObject(v: unknown): v is object {\n        return !!v && v.constructor === Object;\n    }\n\n    /**\n     * Convenience to strip common fingerprints at once.\n     * Call this right before serialization if you want.\n     */\n    stripFingerprints(\n        headers: string[] = [\n            \"Message-ID\",\n            \"Message-Id\",\n            \"X-Mailer\",\n            \"User-Agent\",\n        ],\n    ): void {\n        this.headers.removeMany(headers);\n    }\n}\n\nexport interface EnvironmentContext {\n    toBase64: (v: string) => string;\n    toBase64WebSafe: (v: string) => string;\n    eol: string;\n    validateContentType: (v: string) => string | false;\n}\n\nexport interface Boundaries {\n    mixed: string;\n    alt: string;\n    related: string;\n}\n\nexport type ContentTransferEncoding =\n    | \"7bit\"\n    | \"8bit\"\n    | \"binary\"\n    | \"quoted-printable\"\n    | \"base64\";\n\nexport interface ContentHeaders {\n    \"Content-Type\"?: string;\n    \"Content-Transfer-Encoding\"?: ContentTransferEncoding;\n    \"Content-Disposition\"?: string;\n    \"Content-ID\"?: string;\n    [index: string]: string | undefined;\n}\n\nexport interface ContentOptions {\n    data: string;\n    encoding?: ContentTransferEncoding;\n    contentType: string;\n    headers?: ContentHeaders;\n    charset?: string;\n}\n\nexport interface AttachmentOptions extends ContentOptions {\n    inline?: boolean;\n    filename: string;\n}\n","import { EOL } from 'node:os'\r\nimport * as mime from 'mime-types'\r\nimport { MIMEMessage } from '../MIMEMessage.js'\r\n\r\nconst envctx = {\r\n    toBase64: function toBase64 (data: string) {\r\n        return (Buffer.from(data)).toString('base64')\r\n    },\r\n    toBase64WebSafe: function toBase64WebSafe (data: string) {\r\n        return (Buffer.from(data)).toString('base64')\r\n            .replace(/\\+/g, '-')\r\n            .replace(/\\//g, '_')\r\n            .replace(/=+$/, '')\r\n    },\r\n    eol: EOL,\r\n    validateContentType: (v: string): string | false => {\r\n        return mime.contentType(v)\r\n    }\r\n}\r\n\r\nexport function createMimeMessage (): MIMEMessage {\r\n    return new MIMEMessage(envctx)\r\n}\r\n\r\nexport { MIMEMessage } from '../MIMEMessage.js'\r\nexport { Mailbox } from '../Mailbox.js'\r\nexport { MIMETextError } from '../MIMETextError.js'\r\nexport { MIMEMessageHeader } from '../MIMEMessageHeader.js'\r\nexport { MIMEMessageContent } from '../MIMEMessageContent.js'\r\n\r\nexport type * from '../MIMEMessage.js'\r\nexport type * from '../Mailbox.js'\r\nexport type * from '../MIMETextError.js'\r\nexport type * from '../MIMEMessageHeader.js'\r\nexport type * from '../MIMEMessageContent.js'\r\n"],"names":["MIMETextError","Error","name","description","constructor","message","super","this","Mailbox","reSpecCompliantAddr","addr","type","input","config","parse","getAddrDomain","includes","arr","split","length","dump","isMailboxAddrObject","isMailboxAddrText","text","_trimInstanceProperty","call","startsWith","endsWith","slice","test","v","isObject","Object","hasOwn","MIMEMessageHeader","fields","generator","Date","toUTCString","replace","required","validate","validateMailboxSingle","dumpMailboxSingle","validateMailboxMulti","dumpMailboxMulti","Math","random","toString","filter","obj","value","envctx","toBase64","lines","field","disabled","isValueDefinedByUser","undefined","strval","eol","toObject","reduce","memo","item","get","ind","findIndex","toLowerCase","remove","n","h","removeMany","names","lower","s","set","Set","map","has","some","fieldMatcher","setCustom","custom","isHeaderField","push","isArrayOfMailboxes","join","validProps","keys","prop","isArray","every","Array","MIMEMessageContentHeader","MIMEMessageContent","data","headers","setHeaders","isAttachment","disposition","isInlineAttachment","setHeader","getHeader","getHeaders","MIMEMessage","boundaries","mixed","alt","related","validTypes","validContentTransferEncodings","messages","generateBoundaries","asRaw","plaintext","getMessageByType","html","primaryMessage","hasAttachments","hasInlineAttachments","structure","attachments","getAttachments","a","inlineAttachments","getInlineAttachments","dumpTextContent","asEncoded","toBase64WebSafe","boundary","msg","matcher","addAttachment","opts","filename","contentType","validateContentType","encoding","contentId","inline","assign","_addMessage","addMessage","charset","setSender","mailbox","getSender","setRecipients","recs","_input","getRecipients","setRecipient","setTo","setCc","setBcc","setSubject","getSubject","gmailishBoundary","hex","randomBytes","stripFingerprints","Buffer","from","EOL","mime"],"mappings":"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"}