{"version":3,"file":"mimetext.browser.es.js","sources":["../src/MIMETextError.ts","../src/Mailbox.ts","../src/MIMEMessageHeader.ts","../src/MIMEMessageContent.ts","../src/MIMEMessage.ts","../src/entrypoints/browser.ts"],"sourcesContent":["export class MIMETextError extends Error {\r\n    override name = ''\r\n    description = ''\r\n\r\n    constructor (message: string, description = '') {\r\n        super(description)\r\n\r\n        this.name = message\r\n        this.description = description\r\n    }\r\n}\r\n","import { MIMETextError } from './MIMETextError.js'\r\n\r\nexport class Mailbox {\r\n    reSpecCompliantAddr = /(([^<>\\r\\n]+)\\s)?<[^\\r\\n]+>/\r\n    name = ''\r\n    addr = ''\r\n    type: MailboxType = 'To'\r\n\r\n    constructor (input: MailboxAddrObject | string, config: MailboxConfig = { type: 'To' }) {\r\n        this.type = config.type\r\n\r\n        this.parse(input)\r\n    }\r\n\r\n    getAddrDomain (): string {\r\n        if (this.addr.includes('@')) {\r\n            const arr = this.addr.split('@')\r\n            if (arr.length > 1) return arr[1]!\r\n        }\r\n        return ''\r\n    }\r\n\r\n    dump (): string {\r\n        return this.name.length > 0 ? `\"${this.name}\" <${this.addr}>` : `<${this.addr}>`\r\n    }\r\n\r\n    parse (input: MailboxAddrObject | string): this {\r\n        if (this.isMailboxAddrObject(input)) {\r\n            this.addr = input.addr\r\n            if (typeof input.name === 'string') this.name = input.name\r\n            if (typeof input.type === 'string') this.type = input.type\r\n            return this\r\n        }\r\n\r\n        if (this.isMailboxAddrText(input)) {\r\n            const text = input.trim()\r\n            if (text.startsWith('<') && text.endsWith('>')) {\r\n                this.addr = text.slice(1, -1)\r\n                return this\r\n            }\r\n            const arr = text.split(' <') as [string, string]\r\n            arr[0] = /^(\"|')/.test(arr[0]) ? arr[0].slice(1) : arr[0]\r\n            arr[0] = /(\"|')$/.test(arr[0]) ? arr[0].slice(0, -1) : arr[0]\r\n            arr[1] = arr[1].slice(0, -1)\r\n            this.name = arr[0]\r\n            this.addr = arr[1]\r\n            return this\r\n        }\r\n\r\n        if (typeof input === 'string') {\r\n            this.addr = input\r\n            return this\r\n        }\r\n\r\n        throw new MIMETextError('MIMETEXT_INVALID_MAILBOX', 'Couldn\\'t recognize the input.')\r\n    }\r\n\r\n    isMailboxAddrText (v: unknown): boolean {\r\n        return typeof v === 'string' && this.reSpecCompliantAddr.test(v)\r\n    }\r\n\r\n    isMailboxAddrObject (v: unknown): v is MailboxAddrObject {\r\n        return this.isObject(v) && Object.hasOwn(v, 'addr')\r\n    }\r\n\r\n    isObject (v: unknown): v is object {\r\n        return (!!v) && (v.constructor === Object)\r\n    }\r\n}\r\n\r\nexport interface MailboxConfig {\r\n    type: MailboxType\r\n}\r\nexport interface MailboxAddrObject {\r\n    addr: string\r\n    name?: string\r\n    type?: MailboxType\r\n}\r\nexport type MailboxType = 'To' | 'From' | 'Cc' | 'Bcc'\r\n","import type { EnvironmentContext } from \"./MIMEMessage\";\r\nimport { MIMETextError } from \"./MIMETextError.js\";\r\nimport { Mailbox } from \"./Mailbox.js\";\r\n\r\n/*\r\n    Headers are based on: https://www.rfc-editor.org/rfc/rfc4021#section-2.1\r\n    (Some are ignored as they can be added later or as a custom header.)\r\n*/\r\n\r\nexport class MIMEMessageHeader {\r\n    envctx: EnvironmentContext;\r\n    fields: HeaderField[] = [\r\n        {\r\n            name: \"Date\",\r\n            generator: () =>\r\n                new Date().toUTCString().replace(/GMT|UTC/gi, \"+0000\"),\r\n        },\r\n        {\r\n            name: \"From\",\r\n            required: true,\r\n            validate: (v: unknown) => this.validateMailboxSingle(v),\r\n            dump: (v: unknown) => this.dumpMailboxSingle(v),\r\n        },\r\n        {\r\n            name: \"Sender\",\r\n            validate: (v: unknown) => this.validateMailboxSingle(v),\r\n            dump: (v: unknown) => this.dumpMailboxSingle(v),\r\n        },\r\n        {\r\n            name: \"Reply-To\",\r\n            validate: (v: unknown) => this.validateMailboxSingle(v),\r\n            dump: (v: unknown) => this.dumpMailboxSingle(v),\r\n        },\r\n        {\r\n            name: \"To\",\r\n            validate: (v: unknown) => this.validateMailboxMulti(v),\r\n            dump: (v: unknown) => this.dumpMailboxMulti(v),\r\n        },\r\n        {\r\n            name: \"Cc\",\r\n            validate: (v: unknown) => this.validateMailboxMulti(v),\r\n            dump: (v: unknown) => this.dumpMailboxMulti(v),\r\n        },\r\n        {\r\n            name: \"Bcc\",\r\n            validate: (v: unknown) => this.validateMailboxMulti(v),\r\n            dump: (v: unknown) => this.dumpMailboxMulti(v),\r\n        },\r\n        {\r\n            name: \"Message-ID\",\r\n            generator: () => {\r\n                const randomstr = Math.random().toString(36).slice(2);\r\n                const from = this.fields.filter(\r\n                    (obj) => obj.name === \"From\",\r\n                )[0]!.value as Mailbox;\r\n                const domain = from.getAddrDomain();\r\n                return \"<\" + randomstr + \"@\" + domain + \">\";\r\n            },\r\n        },\r\n        {\r\n            name: \"Subject\",\r\n            required: true,\r\n            dump: (v: unknown) => {\r\n                return typeof v === \"string\"\r\n                    ? \"=?utf-8?B?\" + this.envctx.toBase64(v) + \"?=\"\r\n                    : \"\";\r\n            },\r\n        },\r\n        {\r\n            name: \"MIME-Version\",\r\n            generator: () => \"1.0\",\r\n        },\r\n    ];\r\n\r\n    constructor(envctx: EnvironmentContext) {\r\n        this.envctx = envctx;\r\n    }\r\n\r\n    dump(): string {\r\n        let lines = \"\";\r\n\r\n        for (const field of this.fields) {\r\n            if (field.disabled) continue;\r\n            const isValueDefinedByUser =\r\n                field.value !== undefined && field.value !== null;\r\n            if (!isValueDefinedByUser && field.required) {\r\n                throw new MIMETextError(\r\n                    \"MIMETEXT_MISSING_HEADER\",\r\n                    `The \"${field.name}\" header is required.`,\r\n                );\r\n            }\r\n            if (!isValueDefinedByUser && typeof field.generator !== \"function\")\r\n                continue;\r\n            if (!isValueDefinedByUser && typeof field.generator === \"function\")\r\n                field.value = field.generator();\r\n            const strval =\r\n                Object.hasOwn(field, \"dump\") && typeof field.dump === \"function\"\r\n                    ? field.dump(field.value)\r\n                    : typeof field.value === \"string\"\r\n                      ? field.value\r\n                      : \"\";\r\n            lines += `${field.name}: ${strval}${this.envctx.eol}`;\r\n        }\r\n\r\n        return lines.slice(0, -1 * this.envctx.eol.length);\r\n    }\r\n\r\n    toObject(): HeadersObject {\r\n        return this.fields.reduce((memo: HeadersObject, item) => {\r\n            memo[item.name] = item.value;\r\n            return memo;\r\n        }, {});\r\n    }\r\n\r\n    get(name: string): string | Mailbox | Mailbox[] | undefined {\r\n        const fieldMatcher = (obj: HeaderField): boolean =>\r\n            obj.name.toLowerCase() === name.toLowerCase();\r\n        const ind = this.fields.findIndex(fieldMatcher);\r\n\r\n        return ind !== -1 ? this.fields[ind]!.value : undefined;\r\n    }\r\n\r\n    remove(name: string): void {\r\n        const n = name.toLowerCase();\r\n        // @ts-ignore â€“ assumes this.fields exists like in your code sample\r\n        this.fields = this.fields.filter((h: any) => h.name.toLowerCase() !== n);\r\n    }\r\n\r\n    /**\r\n     * Remove several headers at once (case-insensitive).\r\n     */\r\n    removeMany(names: string[]): void {\r\n        const lower = (s: string) => s.toLowerCase();\r\n        const set = new Set(names.map(lower));\r\n        // @ts-ignore\r\n        this.fields = this.fields.filter((h: any) => !set.has(lower(h.name)));\r\n    }\r\n\r\n    /**\r\n     * Does a header exist (case-insensitive)?\r\n     */\r\n    has(name: string): boolean {\r\n        // @ts-ignore\r\n        return this.fields.some((h: any) => lower(h.name) === lower(name));\r\n    }\r\n\r\n    set(name: string, value: string | Mailbox | Mailbox[]): HeaderField {\r\n        const fieldMatcher = (obj: HeaderField): boolean =>\r\n            obj.name.toLowerCase() === name.toLowerCase();\r\n        const isCustomHeader = !this.fields.some(fieldMatcher);\r\n\r\n        if (!isCustomHeader) {\r\n            const ind = this.fields.findIndex(fieldMatcher);\r\n            const field = this.fields[ind]!;\r\n            if (field.validate && !field.validate(value)) {\r\n                throw new MIMETextError(\r\n                    \"MIMETEXT_INVALID_HEADER_VALUE\",\r\n                    `The value for the header \"${name}\" is invalid.`,\r\n                );\r\n            }\r\n            this.fields[ind]!.value = value;\r\n            return this.fields[ind]!;\r\n        }\r\n\r\n        return this.setCustom({\r\n            name: name,\r\n            value: value,\r\n            custom: true,\r\n            dump: (v: unknown) => (typeof v === \"string\" ? v : \"\"),\r\n        });\r\n    }\r\n\r\n    setCustom(obj: HeaderField): HeaderField {\r\n        if (this.isHeaderField(obj)) {\r\n            if (typeof obj.value !== \"string\") {\r\n                throw new MIMETextError(\r\n                    \"MIMETEXT_INVALID_HEADER_FIELD\",\r\n                    \"Custom header must have a value.\",\r\n                );\r\n            }\r\n            this.fields.push(obj);\r\n            return obj;\r\n        }\r\n\r\n        throw new MIMETextError(\r\n            \"MIMETEXT_INVALID_HEADER_FIELD\",\r\n            \"Invalid input for custom header. It must be in type of HeaderField.\",\r\n        );\r\n    }\r\n\r\n    validateMailboxSingle(v: unknown): v is Mailbox {\r\n        return v instanceof Mailbox;\r\n    }\r\n\r\n    validateMailboxMulti(v: unknown): boolean {\r\n        return v instanceof Mailbox || this.isArrayOfMailboxes(v);\r\n    }\r\n\r\n    dumpMailboxMulti(v: unknown): string {\r\n        const dump = (item: Mailbox): string =>\r\n            item.name.length === 0\r\n                ? item.dump()\r\n                : `=?utf-8?B?${this.envctx.toBase64(item.name)}?= <${item.addr}>`;\r\n        return this.isArrayOfMailboxes(v)\r\n            ? v.map(dump).join(`,${this.envctx.eol} `)\r\n            : v instanceof Mailbox\r\n              ? dump(v)\r\n              : \"\";\r\n    }\r\n\r\n    dumpMailboxSingle(v: unknown): string {\r\n        const dump = (item: Mailbox): string =>\r\n            item.name.length === 0\r\n                ? item.dump()\r\n                : `=?utf-8?B?${this.envctx.toBase64(item.name)}?= <${item.addr}>`;\r\n        return v instanceof Mailbox ? dump(v) : \"\";\r\n    }\r\n\r\n    isHeaderField(v: unknown): v is HeaderField {\r\n        const validProps = [\r\n            \"name\",\r\n            \"value\",\r\n            \"dump\",\r\n            \"required\",\r\n            \"disabled\",\r\n            \"generator\",\r\n            \"custom\",\r\n        ];\r\n        if (this.isObject(v)) {\r\n            const h = v as HeaderField;\r\n            if (\r\n                Object.hasOwn(h, \"name\") &&\r\n                typeof h.name === \"string\" &&\r\n                h.name.length > 0\r\n            ) {\r\n                if (\r\n                    !Object.keys(h).some((prop) => !validProps.includes(prop))\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isObject(v: unknown): v is object {\r\n        return !!v && v.constructor === Object;\r\n    }\r\n\r\n    isArrayOfMailboxes(v: unknown): v is Mailbox[] {\r\n        return (\r\n            this.isArray(v) &&\r\n            v.every((item: unknown) => item instanceof Mailbox)\r\n        );\r\n    }\r\n\r\n    isArray(v: unknown): v is never[] {\r\n        return !!v && v.constructor === Array;\r\n    }\r\n\r\n    /**\r\n     * Convenience to strip common fingerprints at once.\r\n     * Call this right before serialization if you want.\r\n     */\r\n    stripFingerprints(headers: string[] = ['Message-ID','Message-Id','X-Mailer','User-Agent']): void {\r\n        this.removeMany(headers);\r\n    }\r\n}\r\n\r\nexport class MIMEMessageContentHeader extends MIMEMessageHeader {\r\n    override fields = [\r\n        {\r\n            name: \"Content-ID\",\r\n        },\r\n        {\r\n            name: \"Content-Type\",\r\n        },\r\n        {\r\n            name: \"Content-Transfer-Encoding\",\r\n        },\r\n        {\r\n            name: \"Content-Disposition\",\r\n        },\r\n    ];\r\n\r\n    constructor(envctx: EnvironmentContext) {\r\n        super(envctx);\r\n    }\r\n}\r\n\r\nexport type HeadersObject = Record<\r\n    string,\r\n    string | Mailbox | Mailbox[] | undefined\r\n>;\r\nexport interface HeaderField {\r\n    name: string;\r\n    dump?: (v: string | Mailbox | Mailbox[] | undefined) => string;\r\n    value?: string | Mailbox | Mailbox[] | undefined;\r\n    validate?: (v: unknown) => boolean;\r\n    required?: boolean;\r\n    disabled?: boolean;\r\n    generator?: () => string;\r\n    custom?: boolean;\r\n}\r\n","import type { EnvironmentContext } from './MIMEMessage'\r\nimport type { Mailbox } from './Mailbox'\r\nimport { type HeadersObject, MIMEMessageContentHeader } from './MIMEMessageHeader.js'\r\n\r\nexport class MIMEMessageContent {\r\n    envctx: EnvironmentContext\r\n    headers\r\n    data\r\n\r\n    constructor (envctx: EnvironmentContext, data: string, headers = {}) {\r\n        this.envctx = envctx\r\n        this.headers = new MIMEMessageContentHeader(this.envctx)\r\n        this.data = data\r\n        this.setHeaders(headers)\r\n    }\r\n\r\n    dump (): string {\r\n        const eol = this.envctx.eol\r\n        return this.headers.dump() + eol + eol + this.data\r\n    }\r\n\r\n    isAttachment (): boolean {\r\n        const disposition = this.headers.get('Content-Disposition')\r\n        return typeof disposition === 'string' && disposition.includes('attachment')\r\n    }\r\n\r\n    isInlineAttachment (): boolean {\r\n        const disposition = this.headers.get('Content-Disposition')\r\n        return typeof disposition === 'string' && disposition.includes('inline')\r\n    }\r\n\r\n    setHeader (name: string, value: string | Mailbox | Mailbox[]): string {\r\n        this.headers.set(name, value)\r\n        return name\r\n    }\r\n\r\n    getHeader (name: string): string | Mailbox | Mailbox[] | undefined {\r\n        return this.headers.get(name)\r\n    }\r\n\r\n    setHeaders (obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\r\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!))\r\n    }\r\n\r\n    getHeaders (): HeadersObject {\r\n        return this.headers.toObject()\r\n    }\r\n}\r\n","import type { MailboxAddrObject, MailboxConfig } from './Mailbox.js'\r\nimport { randomBytes } from 'crypto';\r\nimport { MIMETextError } from './MIMETextError.js'\r\nimport { type HeadersObject, MIMEMessageHeader } from './MIMEMessageHeader.js'\r\nimport { Mailbox } from './Mailbox.js'\r\nimport { MIMEMessageContent } from './MIMEMessageContent.js'\r\n\r\nexport class MIMEMessage {\r\n    envctx: EnvironmentContext\r\n    headers: MIMEMessageHeader\r\n    boundaries: Boundaries = { mixed: '', alt: '', related: '' }\r\n    validTypes = ['text/html', 'text/plain']\r\n    validContentTransferEncodings = ['7bit', '8bit', 'binary', 'quoted-printable', 'base64']\r\n    messages: MIMEMessageContent[] = []\r\n\r\n    constructor (envctx: EnvironmentContext) {\r\n        this.envctx = envctx\r\n        this.headers = new MIMEMessageHeader(this.envctx)\r\n        this.messages = []\r\n\r\n        this.generateBoundaries()\r\n    }\r\n\r\n    asRaw (): string {\r\n        const eol = this.envctx.eol\r\n        const lines = this.headers.dump()\r\n\r\n        const plaintext = this.getMessageByType('text/plain')\r\n        const html = this.getMessageByType('text/html')\r\n        const primaryMessage = html ?? (plaintext ?? undefined)\r\n\r\n        if (primaryMessage === undefined) {\r\n            throw new MIMETextError('MIMETEXT_MISSING_BODY', 'No content added to the message.')\r\n        }\r\n\r\n        const hasAttachments = this.hasAttachments()\r\n        const hasInlineAttachments = this.hasInlineAttachments()\r\n\r\n        const structure = hasInlineAttachments && hasAttachments\r\n            ? 'mixed+related'\r\n            : hasAttachments\r\n                ? 'mixed'\r\n                : hasInlineAttachments\r\n                    ? 'related'\r\n                    : plaintext && html\r\n                        ? 'alternative'\r\n                        : ''\r\n\r\n        if (structure === 'mixed+related') {\r\n            const attachments = this.getAttachments()\r\n                .map((a) => '--' + this.boundaries.mixed + eol + a.dump() + eol + eol)\r\n                .join('')\r\n                .slice(0, -1 * eol.length)\r\n            const inlineAttachments = this.getInlineAttachments()\r\n                .map((a) => '--' + this.boundaries.related + eol + a.dump() + eol + eol)\r\n                .join('')\r\n                .slice(0, -1 * eol.length)\r\n            return lines + eol +\r\n                'Content-Type: multipart/mixed; boundary=' + this.boundaries.mixed + eol +\r\n                eol +\r\n                '--' + this.boundaries.mixed + eol +\r\n                'Content-Type: multipart/related; boundary=' + this.boundaries.related + eol +\r\n                eol +\r\n                this.dumpTextContent(plaintext, html, this.boundaries.related) + eol +\r\n                eol +\r\n                inlineAttachments +\r\n                '--' + this.boundaries.related + '--' + eol +\r\n                attachments +\r\n                '--' + this.boundaries.mixed + '--'\r\n        } else if (structure === 'mixed') {\r\n            const attachments = this.getAttachments()\r\n                .map((a) => '--' + this.boundaries.mixed + eol + a.dump() + eol + eol)\r\n                .join('')\r\n                .slice(0, -1 * eol.length)\r\n            return lines + eol +\r\n                'Content-Type: multipart/mixed; boundary=' + this.boundaries.mixed + eol +\r\n                eol +\r\n                this.dumpTextContent(plaintext, html, this.boundaries.mixed) + eol +\r\n                (plaintext && html ? '' : eol) +\r\n                attachments +\r\n                '--' + this.boundaries.mixed + '--'\r\n        } else if (structure === 'related') {\r\n            const inlineAttachments = this.getInlineAttachments()\r\n                .map((a) => '--' + this.boundaries.related + eol + a.dump() + eol + eol)\r\n                .join('')\r\n                .slice(0, -1 * eol.length)\r\n            return lines + eol +\r\n                'Content-Type: multipart/related; boundary=' + this.boundaries.related + eol +\r\n                eol +\r\n                this.dumpTextContent(plaintext, html, this.boundaries.related) + eol +\r\n                eol +\r\n                inlineAttachments +\r\n                '--' + this.boundaries.related + '--'\r\n        } else if (structure === 'alternative') {\r\n            return lines + eol +\r\n                'Content-Type: multipart/alternative; boundary=' + this.boundaries.alt + eol +\r\n                eol +\r\n                this.dumpTextContent(plaintext, html, this.boundaries.alt) + eol +\r\n                eol +\r\n                '--' + this.boundaries.alt + '--'\r\n        } else {\r\n            return lines + eol + primaryMessage.dump()\r\n        }\r\n    }\r\n\r\n    asEncoded (): string {\r\n        return this.envctx.toBase64WebSafe(this.asRaw())\r\n    }\r\n\r\n    dumpTextContent (plaintext: MIMEMessageContent | undefined, html: MIMEMessageContent | undefined, boundary: string): string {\r\n        const eol = this.envctx.eol\r\n        const primaryMessage = html ?? plaintext\r\n\r\n        let data = ''\r\n\r\n        if (plaintext && html && (this.hasInlineAttachments() || this.hasAttachments())) {\r\n            data = '--' + boundary + eol +\r\n                'Content-Type: multipart/alternative; boundary=' + this.boundaries.alt + eol +\r\n                eol +\r\n                '--' + this.boundaries.alt + eol +\r\n                plaintext.dump() + eol +\r\n                eol +\r\n                '--' + this.boundaries.alt + eol +\r\n                html.dump() + eol +\r\n                eol +\r\n                '--' + this.boundaries.alt + '--'\r\n        } else if (plaintext && html) {\r\n            data = '--' + boundary + eol +\r\n                plaintext.dump() + eol +\r\n                eol +\r\n                '--' + boundary + eol +\r\n                html.dump()\r\n        } else {\r\n            data = '--' + boundary + eol +\r\n                (primaryMessage!).dump()\r\n        }\r\n\r\n        return data\r\n    }\r\n\r\n    hasInlineAttachments (): boolean {\r\n        return this.messages.some((msg) => msg.isInlineAttachment())\r\n    }\r\n\r\n    hasAttachments (): boolean {\r\n        return this.messages.some((msg) => msg.isAttachment())\r\n    }\r\n\r\n    getAttachments (): MIMEMessageContent[] | [] {\r\n        const matcher = (msg: MIMEMessageContent): boolean => msg.isAttachment()\r\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : []\r\n    }\r\n\r\n    getInlineAttachments (): MIMEMessageContent[] | [] {\r\n        const matcher = (msg: MIMEMessageContent): boolean => msg.isInlineAttachment()\r\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : []\r\n    }\r\n\r\n    getMessageByType (type: string): MIMEMessageContent | undefined {\r\n        const matcher = (msg: MIMEMessageContent): boolean => !msg.isAttachment() && !msg.isInlineAttachment() && (msg.getHeader('Content-Type') as string || '').includes(type)\r\n        return this.messages.some(matcher) ? this.messages.filter(matcher)[0] : undefined\r\n    }\r\n\r\n    addAttachment (opts: AttachmentOptions): MIMEMessageContent {\r\n        if (!this.isObject(opts.headers)) opts.headers = {}\r\n\r\n        if (typeof opts.filename !== 'string') {\r\n            throw new MIMETextError('MIMETEXT_MISSING_FILENAME', 'The property \"filename\" must exist while adding attachments.')\r\n        }\r\n\r\n        let type = (opts.headers['Content-Type'] ?? opts.contentType) || 'none'\r\n        if (this.envctx.validateContentType(type) === false) {\r\n            throw new MIMETextError('MIMETEXT_INVALID_MESSAGE_TYPE', `You specified an invalid content type \"${type}\".`)\r\n        }\r\n\r\n        const encoding = (opts.headers['Content-Transfer-Encoding'] ?? opts.encoding) ?? 'base64'\r\n        if (!this.validContentTransferEncodings.includes(encoding)) {\r\n            type = 'application/octet-stream'\r\n        }\r\n\r\n        const contentId = opts.headers['Content-ID']\r\n        if (typeof contentId === 'string' && contentId.length > 2 && !contentId.startsWith('<') && !contentId.endsWith('>')) {\r\n            opts.headers['Content-ID'] = '<' + opts.headers['Content-ID'] + '>'\r\n        }\r\n\r\n        const disposition = opts.inline ? 'inline' : 'attachment'\r\n\r\n        opts.headers = Object.assign({}, opts.headers, {\r\n            'Content-Type': `${type}; name=\"${opts.filename}\"`,\r\n            'Content-Transfer-Encoding': encoding,\r\n            'Content-Disposition': `${disposition}; filename=\"${opts.filename}\"`\r\n        })\r\n\r\n        return this._addMessage({ data: opts.data, headers: opts.headers })\r\n    }\r\n\r\n    addMessage (opts: ContentOptions): MIMEMessageContent {\r\n        if (!this.isObject(opts.headers)) opts.headers = {}\r\n\r\n        let type = (opts.headers['Content-Type'] ?? opts.contentType) || 'none'\r\n        if (!this.validTypes.includes(type)) {\r\n            throw new MIMETextError('MIMETEXT_INVALID_MESSAGE_TYPE', `Valid content types are ${this.validTypes.join(', ')} but you specified \"${type}\".`)\r\n        }\r\n\r\n        const encoding = (opts.headers['Content-Transfer-Encoding'] ?? opts.encoding) ?? '7bit'\r\n        if (!this.validContentTransferEncodings.includes(encoding)) {\r\n            type = 'application/octet-stream'\r\n        }\r\n\r\n        const charset = opts.charset ?? 'UTF-8'\r\n\r\n        opts.headers = Object.assign({}, opts.headers, {\r\n            'Content-Type': `${type}; charset=${charset}`,\r\n            'Content-Transfer-Encoding': encoding\r\n        })\r\n\r\n        return this._addMessage({ data: opts.data, headers: opts.headers })\r\n    }\r\n\r\n    private _addMessage (opts: { data: string, headers: ContentHeaders }): MIMEMessageContent {\r\n        const msg = new MIMEMessageContent(this.envctx, opts.data, opts.headers)\r\n\r\n        this.messages.push(msg)\r\n\r\n        return msg\r\n    }\r\n\r\n    setSender (input: MailboxAddrObject | string, config: MailboxConfig = { type: 'From' }): Mailbox {\r\n        const mailbox = new Mailbox(input, config)\r\n        this.setHeader('From', mailbox)\r\n        return mailbox\r\n    }\r\n\r\n    getSender (): Mailbox | undefined {\r\n        return this.getHeader('From') as Mailbox\r\n    }\r\n\r\n    setRecipients (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\r\n        const arr = !this.isArray(input) ? [input] : input\r\n        const recs = arr.map((_input) => new Mailbox(_input, config))\r\n        this.setHeader(config.type, recs)\r\n        return recs\r\n    }\r\n\r\n    getRecipients (config: MailboxConfig = { type: 'To' }): Mailbox | Mailbox[] | undefined {\r\n        return this.getHeader(config.type) as Mailbox | Mailbox[] | undefined\r\n    }\r\n\r\n    setRecipient (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\r\n        return this.setRecipients(input, config)\r\n    }\r\n\r\n    setTo (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\r\n        return this.setRecipients(input, config)\r\n    }\r\n\r\n    setCc (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'Cc' }): Mailbox[] {\r\n        return this.setRecipients(input, config)\r\n    }\r\n\r\n    setBcc (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'Bcc' }): Mailbox[] {\r\n        return this.setRecipients(input, config)\r\n    }\r\n\r\n    setSubject (value: string): string {\r\n        this.setHeader('subject', value)\r\n        return value\r\n    }\r\n\r\n    getSubject (): string | undefined {\r\n        return this.getHeader('subject') as string\r\n    }\r\n\r\n    setHeader (name: string, value: string | Mailbox | Mailbox[]): string {\r\n        this.headers.set(name, value)\r\n        return name\r\n    }\r\n\r\n    getHeader (name: string): string | Mailbox | Mailbox[] | undefined {\r\n        return this.headers.get(name)\r\n    }\r\n\r\n    setHeaders (obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\r\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!))\r\n    }\r\n\r\n    getHeaders (): HeadersObject {\r\n        return this.headers.toObject()\r\n    }\r\n\r\n    toBase64 (v: string): string {\r\n        return this.envctx.toBase64(v)\r\n    }\r\n\r\n    toBase64WebSafe (v: string): string {\r\n        return this.envctx.toBase64WebSafe(v)\r\n    }\r\n\r\n    generateBoundaries (): void {\r\n        const gmailishBoundary = (): string => {\r\n            const hex = (n: number) => randomBytes(n).toString('hex'); // lowercase\r\n            return '000000000000' + hex(8) + hex(3);\r\n        }\r\n        this.boundaries = {\r\n            mixed: gmailishBoundary(),\r\n            alt: gmailishBoundary(),\r\n            related: gmailishBoundary()\r\n        }\r\n    }\r\n\r\n    isArray (v: unknown): v is unknown[] {\r\n        return (!!v) && (v.constructor === Array)\r\n    }\r\n\r\n    isObject (v: unknown): v is object {\r\n        return (!!v) && (v.constructor === Object)\r\n    }\r\n}\r\n\r\nexport interface EnvironmentContext {\r\n    toBase64: (v: string) => string\r\n    toBase64WebSafe: (v: string) => string\r\n    eol: string\r\n    validateContentType: (v: string) => string | false\r\n}\r\n\r\nexport interface Boundaries {\r\n    mixed: string\r\n    alt: string\r\n    related: string\r\n}\r\n\r\nexport type ContentTransferEncoding = '7bit' | '8bit' | 'binary' | 'quoted-printable' | 'base64'\r\n\r\nexport interface ContentHeaders {\r\n    'Content-Type'?: string\r\n    'Content-Transfer-Encoding'?: ContentTransferEncoding\r\n    'Content-Disposition'?: string\r\n    'Content-ID'?: string\r\n    [index: string]: string | undefined\r\n}\r\n\r\nexport interface ContentOptions {\r\n    data: string\r\n    encoding?: ContentTransferEncoding\r\n    contentType: string\r\n    headers?: ContentHeaders\r\n    charset?: string\r\n}\r\n\r\nexport interface AttachmentOptions extends ContentOptions {\r\n    inline?: boolean\r\n    filename: string\r\n}\r\n","import { Base64 } from 'js-base64'\r\nimport { MIMEMessage } from '../MIMEMessage.js'\r\n\r\nconst envctx = {\r\n    toBase64: function toBase64 (data: string) {\r\n        return Base64.encode(data)\r\n    },\r\n    toBase64WebSafe: function toBase64WebSafe (data: string) {\r\n        return Base64.encodeURI(data)\r\n    },\r\n    eol: '\\r\\n',\r\n    validateContentType: (v: string): string | false => {\r\n        return v.length > 0 ? v : false\r\n    }\r\n}\r\n\r\nexport function createMimeMessage (): MIMEMessage {\r\n    return new MIMEMessage(envctx)\r\n}\r\n\r\nexport { MIMEMessage } from '../MIMEMessage.js'\r\nexport { Mailbox } from '../Mailbox.js'\r\nexport { MIMETextError } from '../MIMETextError.js'\r\nexport { MIMEMessageHeader } from '../MIMEMessageHeader.js'\r\nexport { MIMEMessageContent } from '../MIMEMessageContent.js'\r\n\r\nexport type * from '../MIMEMessage.js'\r\nexport type * from '../Mailbox.js'\r\nexport type * from '../MIMETextError.js'\r\nexport type * from '../MIMEMessageHeader.js'\r\nexport type * from '../MIMEMessageContent.js'\r\n"],"names":["MIMETextError","Error","constructor","message","description","arguments","length","undefined","super","_defineProperty","this","name","Mailbox","input","config","type","parse","getAddrDomain","addr","includes","arr","split","dump","concat","isMailboxAddrObject","isMailboxAddrText","text","_trimInstanceProperty","call","startsWith","endsWith","slice","test","v","reSpecCompliantAddr","isObject","Object","hasOwn","MIMEMessageHeader","envctx","generator","Date","toUTCString","replace","required","validate","validateMailboxSingle","dumpMailboxSingle","validateMailboxMulti","dumpMailboxMulti","Math","random","toString","fields","filter","obj","value","toBase64","lines","field","disabled","isValueDefinedByUser","strval","eol","toObject","reduce","memo","item","get","ind","findIndex","toLowerCase","remove","n","h","removeMany","names","lower","s","set","Set","map","has","some","fieldMatcher","setCustom","custom","isHeaderField","push","isArrayOfMailboxes","join","validProps","keys","prop","isArray","every","Array","stripFingerprints","headers","MIMEMessageContentHeader","MIMEMessageContent","data","setHeaders","isAttachment","disposition","isInlineAttachment","setHeader","getHeader","getHeaders","MIMEMessage","mixed","alt","related","messages","generateBoundaries","asRaw","plaintext","getMessageByType","html","primaryMessage","hasAttachments","hasInlineAttachments","structure","attachments","getAttachments","a","boundaries","inlineAttachments","getInlineAttachments","dumpTextContent","asEncoded","toBase64WebSafe","boundary","msg","matcher","addAttachment","opts","_opts$headers$Content","_ref","_opts$headers$Content2","filename","contentType","validateContentType","encoding","validContentTransferEncodings","contentId","inline","assign","_addMessage","addMessage","_opts$headers$Content3","_ref2","_opts$headers$Content4","_opts$charset","validTypes","charset","setSender","mailbox","getSender","setRecipients","recs","_input","getRecipients","setRecipient","setTo","setCc","setBcc","setSubject","getSubject","gmailishBoundary","hex","randomBytes","Base64","encode","encodeURI","createMimeMessage"],"mappings":"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"}