{"version":3,"file":"mimetext.browser.cjs.js","sources":["../src/MIMETextError.ts","../src/Mailbox.ts","../src/MIMEMessageHeader.ts","../src/MIMEMessageContent.ts","../src/MIMEMessage.ts","../src/entrypoints/browser.ts"],"sourcesContent":["export class MIMETextError extends Error {\r\n    override name = ''\r\n    description = ''\r\n\r\n    constructor (message: string, description = '') {\r\n        super(description)\r\n\r\n        this.name = message\r\n        this.description = description\r\n    }\r\n}\r\n","import { MIMETextError } from './MIMETextError.js'\r\n\r\nexport class Mailbox {\r\n    reSpecCompliantAddr = /(([^<>\\r\\n]+)\\s)?<[^\\r\\n]+>/\r\n    name = ''\r\n    addr = ''\r\n    type: MailboxType = 'To'\r\n\r\n    constructor (input: MailboxAddrObject | string, config: MailboxConfig = { type: 'To' }) {\r\n        this.type = config.type\r\n\r\n        this.parse(input)\r\n    }\r\n\r\n    getAddrDomain (): string {\r\n        if (this.addr.includes('@')) {\r\n            const arr = this.addr.split('@')\r\n            if (arr.length > 1) return arr[1]!\r\n        }\r\n        return ''\r\n    }\r\n\r\n    dump (): string {\r\n        return this.name.length > 0 ? `\"${this.name}\" <${this.addr}>` : `<${this.addr}>`\r\n    }\r\n\r\n    parse (input: MailboxAddrObject | string): this {\r\n        if (this.isMailboxAddrObject(input)) {\r\n            this.addr = input.addr\r\n            if (typeof input.name === 'string') this.name = input.name\r\n            if (typeof input.type === 'string') this.type = input.type\r\n            return this\r\n        }\r\n\r\n        if (this.isMailboxAddrText(input)) {\r\n            const text = input.trim()\r\n            if (text.startsWith('<') && text.endsWith('>')) {\r\n                this.addr = text.slice(1, -1)\r\n                return this\r\n            }\r\n            const arr = text.split(' <') as [string, string]\r\n            arr[0] = /^(\"|')/.test(arr[0]) ? arr[0].slice(1) : arr[0]\r\n            arr[0] = /(\"|')$/.test(arr[0]) ? arr[0].slice(0, -1) : arr[0]\r\n            arr[1] = arr[1].slice(0, -1)\r\n            this.name = arr[0]\r\n            this.addr = arr[1]\r\n            return this\r\n        }\r\n\r\n        if (typeof input === 'string') {\r\n            this.addr = input\r\n            return this\r\n        }\r\n\r\n        throw new MIMETextError('MIMETEXT_INVALID_MAILBOX', 'Couldn\\'t recognize the input.')\r\n    }\r\n\r\n    isMailboxAddrText (v: unknown): boolean {\r\n        return typeof v === 'string' && this.reSpecCompliantAddr.test(v)\r\n    }\r\n\r\n    isMailboxAddrObject (v: unknown): v is MailboxAddrObject {\r\n        return this.isObject(v) && Object.hasOwn(v, 'addr')\r\n    }\r\n\r\n    isObject (v: unknown): v is object {\r\n        return (!!v) && (v.constructor === Object)\r\n    }\r\n}\r\n\r\nexport interface MailboxConfig {\r\n    type: MailboxType\r\n}\r\nexport interface MailboxAddrObject {\r\n    addr: string\r\n    name?: string\r\n    type?: MailboxType\r\n}\r\nexport type MailboxType = 'To' | 'From' | 'Cc' | 'Bcc'\r\n","import type { EnvironmentContext } from \"./MIMEMessage\";\nimport { MIMETextError } from \"./MIMETextError.js\";\nimport { Mailbox } from \"./Mailbox.js\";\n\n/*\n    Headers are based on: https://www.rfc-editor.org/rfc/rfc4021#section-2.1\n    (Some are ignored as they can be added later or as a custom header.)\n*/\n\nexport class MIMEMessageHeader {\n    envctx: EnvironmentContext;\n    fields: HeaderField[] = [\n        {\n            name: \"Date\",\n            generator: () =>\n                new Date().toUTCString().replace(/GMT|UTC/gi, \"+0000\"),\n        },\n        {\n            name: \"From\",\n            required: true,\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v),\n        },\n        {\n            name: \"Sender\",\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v),\n        },\n        {\n            name: \"Reply-To\",\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v),\n        },\n        {\n            name: \"To\",\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v),\n        },\n        {\n            name: \"Cc\",\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v),\n        },\n        {\n            name: \"Bcc\",\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v),\n        },\n        {\n            name: \"Message-ID\",\n            generator: () => {\n                const randomstr = `${Math.random().toString(36).slice(2)}${Math.random().toString(36).slice(2)}`;\n                const from = this.fields.filter(\n                    (obj) => obj.name === \"From\",\n                )[0]!.value as Mailbox;\n                const domain = from.getAddrDomain();\n                return \"<\" + randomstr + \"@\" + domain + \">\";\n            },\n        },\n        {\n            name: \"Subject\",\n            required: true,\n            dump: (v: unknown) => {\n                return typeof v === \"string\"\n                    ? \"=?utf-8?B?\" + this.envctx.toBase64(v) + \"?=\"\n                    : \"\";\n            },\n        },\n        {\n            name: \"MIME-Version\",\n            generator: () => \"1.0\",\n        },\n    ];\n\n    constructor(envctx: EnvironmentContext) {\n        this.envctx = envctx;\n    }\n\n    dump(): string {\n        let lines = \"\";\n\n        for (const field of this.fields) {\n            if (field.disabled) continue;\n            const isValueDefinedByUser =\n                field.value !== undefined && field.value !== null;\n            if (!isValueDefinedByUser && field.required) {\n                throw new MIMETextError(\n                    \"MIMETEXT_MISSING_HEADER\",\n                    `The \"${field.name}\" header is required.`,\n                );\n            }\n            if (!isValueDefinedByUser && typeof field.generator !== \"function\")\n                continue;\n            if (!isValueDefinedByUser && typeof field.generator === \"function\")\n                field.value = field.generator();\n            const strval =\n                Object.hasOwn(field, \"dump\") && typeof field.dump === \"function\"\n                    ? field.dump(field.value)\n                    : typeof field.value === \"string\"\n                      ? field.value\n                      : \"\";\n            lines += `${field.name}: ${strval}${this.envctx.eol}`;\n        }\n\n        return lines.slice(0, -1 * this.envctx.eol.length);\n    }\n\n    toObject(): HeadersObject {\n        return this.fields.reduce((memo: HeadersObject, item) => {\n            memo[item.name] = item.value;\n            return memo;\n        }, {});\n    }\n\n    get(name: string): string | Mailbox | Mailbox[] | undefined {\n        const fieldMatcher = (obj: HeaderField): boolean =>\n            obj.name.toLowerCase() === name.toLowerCase();\n        const ind = this.fields.findIndex(fieldMatcher);\n\n        return ind !== -1 ? this.fields[ind]!.value : undefined;\n    }\n\n    remove(name: string): void {\n        const n = name.toLowerCase();\n        // @ts-ignore â€“ assumes this.fields exists like in your code sample\n        this.fields = this.fields.filter(\n            (h: any) => h.name.toLowerCase() !== n,\n        );\n    }\n\n    /**\n     * Remove several headers at once (case-insensitive).\n     */\n    removeMany(names: string[]): void {\n        const lower = (s: string) => s.toLowerCase();\n        const set = new Set(names.map(lower));\n        // @ts-ignore\n        this.fields = this.fields.filter((h: any) => !set.has(lower(h.name)));\n    }\n\n    /**\n     * Does a header exist (case-insensitive)?\n     */\n    has(name: string): boolean {\n        // @ts-ignore\n        return this.fields.some((h: any) => lower(h.name) === lower(name));\n    }\n\n    set(name: string, value: string | Mailbox | Mailbox[]): HeaderField {\n        const fieldMatcher = (obj: HeaderField): boolean =>\n            obj.name.toLowerCase() === name.toLowerCase();\n        const isCustomHeader = !this.fields.some(fieldMatcher);\n\n        if (!isCustomHeader) {\n            const ind = this.fields.findIndex(fieldMatcher);\n            const field = this.fields[ind]!;\n            if (field.validate && !field.validate(value)) {\n                throw new MIMETextError(\n                    \"MIMETEXT_INVALID_HEADER_VALUE\",\n                    `The value for the header \"${name}\" is invalid.`,\n                );\n            }\n            this.fields[ind]!.value = value;\n            return this.fields[ind]!;\n        }\n\n        return this.setCustom({\n            name: name,\n            value: value,\n            custom: true,\n            dump: (v: unknown) => (typeof v === \"string\" ? v : \"\"),\n        });\n    }\n\n    setCustom(obj: HeaderField): HeaderField {\n        if (this.isHeaderField(obj)) {\n            if (typeof obj.value !== \"string\") {\n                throw new MIMETextError(\n                    \"MIMETEXT_INVALID_HEADER_FIELD\",\n                    \"Custom header must have a value.\",\n                );\n            }\n            this.fields.push(obj);\n            return obj;\n        }\n\n        throw new MIMETextError(\n            \"MIMETEXT_INVALID_HEADER_FIELD\",\n            \"Invalid input for custom header. It must be in type of HeaderField.\",\n        );\n    }\n\n    validateMailboxSingle(v: unknown): v is Mailbox {\n        return v instanceof Mailbox;\n    }\n\n    validateMailboxMulti(v: unknown): boolean {\n        return v instanceof Mailbox || this.isArrayOfMailboxes(v);\n    }\n\n    dumpMailboxMulti(v: unknown): string {\n        const dump = (item: Mailbox): string =>\n            item.name.length === 0\n                ? item.dump()\n                : `=?utf-8?B?${this.envctx.toBase64(item.name)}?= <${item.addr}>`;\n        return this.isArrayOfMailboxes(v)\n            ? v.map(dump).join(`,${this.envctx.eol} `)\n            : v instanceof Mailbox\n              ? dump(v)\n              : \"\";\n    }\n\n    dumpMailboxSingle(v: unknown): string {\n        const dump = (item: Mailbox): string =>\n            item.name.length === 0\n                ? item.dump()\n                : `=?utf-8?B?${this.envctx.toBase64(item.name)}?= <${item.addr}>`;\n        return v instanceof Mailbox ? dump(v) : \"\";\n    }\n\n    isHeaderField(v: unknown): v is HeaderField {\n        const validProps = [\n            \"name\",\n            \"value\",\n            \"dump\",\n            \"required\",\n            \"disabled\",\n            \"generator\",\n            \"custom\",\n        ];\n        if (this.isObject(v)) {\n            const h = v as HeaderField;\n            if (\n                Object.hasOwn(h, \"name\") &&\n                typeof h.name === \"string\" &&\n                h.name.length > 0\n            ) {\n                if (\n                    !Object.keys(h).some((prop) => !validProps.includes(prop))\n                ) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    isObject(v: unknown): v is object {\n        return !!v && v.constructor === Object;\n    }\n\n    isArrayOfMailboxes(v: unknown): v is Mailbox[] {\n        return (\n            this.isArray(v) &&\n            v.every((item: unknown) => item instanceof Mailbox)\n        );\n    }\n\n    isArray(v: unknown): v is never[] {\n        return !!v && v.constructor === Array;\n    }\n}\n\nexport class MIMEMessageContentHeader extends MIMEMessageHeader {\n    override fields = [\n        {\n            name: \"Content-ID\",\n        },\n        {\n            name: \"Content-Type\",\n        },\n        {\n            name: \"Content-Transfer-Encoding\",\n        },\n        {\n            name: \"Content-Disposition\",\n        },\n    ];\n\n    constructor(envctx: EnvironmentContext) {\n        super(envctx);\n    }\n}\n\nexport type HeadersObject = Record<\n    string,\n    string | Mailbox | Mailbox[] | undefined\n>;\nexport interface HeaderField {\n    name: string;\n    dump?: (v: string | Mailbox | Mailbox[] | undefined) => string;\n    value?: string | Mailbox | Mailbox[] | undefined;\n    validate?: (v: unknown) => boolean;\n    required?: boolean;\n    disabled?: boolean;\n    generator?: () => string;\n    custom?: boolean;\n}\n","import type { EnvironmentContext } from './MIMEMessage'\r\nimport type { Mailbox } from './Mailbox'\r\nimport { type HeadersObject, MIMEMessageContentHeader } from './MIMEMessageHeader.js'\r\n\r\nexport class MIMEMessageContent {\r\n    envctx: EnvironmentContext\r\n    headers\r\n    data\r\n\r\n    constructor (envctx: EnvironmentContext, data: string, headers = {}) {\r\n        this.envctx = envctx\r\n        this.headers = new MIMEMessageContentHeader(this.envctx)\r\n        this.data = data\r\n        this.setHeaders(headers)\r\n    }\r\n\r\n    dump (): string {\r\n        const eol = this.envctx.eol\r\n        return this.headers.dump() + eol + eol + this.data\r\n    }\r\n\r\n    isAttachment (): boolean {\r\n        const disposition = this.headers.get('Content-Disposition')\r\n        return typeof disposition === 'string' && disposition.includes('attachment')\r\n    }\r\n\r\n    isInlineAttachment (): boolean {\r\n        const disposition = this.headers.get('Content-Disposition')\r\n        return typeof disposition === 'string' && disposition.includes('inline')\r\n    }\r\n\r\n    setHeader (name: string, value: string | Mailbox | Mailbox[]): string {\r\n        this.headers.set(name, value)\r\n        return name\r\n    }\r\n\r\n    getHeader (name: string): string | Mailbox | Mailbox[] | undefined {\r\n        return this.headers.get(name)\r\n    }\r\n\r\n    setHeaders (obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\r\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!))\r\n    }\r\n\r\n    getHeaders (): HeadersObject {\r\n        return this.headers.toObject()\r\n    }\r\n}\r\n","import type { MailboxAddrObject, MailboxConfig } from \"./Mailbox.js\";\nimport { randomBytes } from \"crypto\";\nimport { MIMETextError } from \"./MIMETextError.js\";\nimport { type HeadersObject, MIMEMessageHeader } from \"./MIMEMessageHeader.js\";\nimport { Mailbox } from \"./Mailbox.js\";\nimport { MIMEMessageContent } from \"./MIMEMessageContent.js\";\n\nexport class MIMEMessage {\n    envctx: EnvironmentContext;\n    headers: MIMEMessageHeader;\n    boundaries: Boundaries = { mixed: \"\", alt: \"\", related: \"\" };\n    validTypes = [\"text/html\", \"text/plain\"];\n    validContentTransferEncodings = [\n        \"7bit\",\n        \"8bit\",\n        \"binary\",\n        \"quoted-printable\",\n        \"base64\",\n    ];\n    messages: MIMEMessageContent[] = [];\n\n    constructor(envctx: EnvironmentContext) {\n        this.envctx = envctx;\n        this.headers = new MIMEMessageHeader(this.envctx);\n        this.messages = [];\n\n        this.generateBoundaries();\n    }\n\n    asRaw(): string {\n        const eol = this.envctx.eol;\n        const lines = this.headers.dump();\n\n        const plaintext = this.getMessageByType(\"text/plain\");\n        const html = this.getMessageByType(\"text/html\");\n        const primaryMessage = html ?? plaintext ?? undefined;\n\n        if (primaryMessage === undefined) {\n            throw new MIMETextError(\n                \"MIMETEXT_MISSING_BODY\",\n                \"No content added to the message.\",\n            );\n        }\n\n        const hasAttachments = this.hasAttachments();\n        const hasInlineAttachments = this.hasInlineAttachments();\n\n        const structure =\n            hasInlineAttachments && hasAttachments\n                ? \"mixed+related\"\n                : hasAttachments\n                  ? \"mixed\"\n                  : hasInlineAttachments\n                    ? \"related\"\n                    : plaintext && html\n                      ? \"alternative\"\n                      : \"\";\n\n        if (structure === \"mixed+related\") {\n            const attachments = this.getAttachments()\n                .map(\n                    (a) =>\n                        \"--\" +\n                        this.boundaries.mixed +\n                        eol +\n                        a.dump() +\n                        eol +\n                        eol,\n                )\n                .join(\"\")\n                .slice(0, -1 * eol.length);\n            const inlineAttachments = this.getInlineAttachments()\n                .map(\n                    (a) =>\n                        \"--\" +\n                        this.boundaries.related +\n                        eol +\n                        a.dump() +\n                        eol +\n                        eol,\n                )\n                .join(\"\")\n                .slice(0, -1 * eol.length);\n            return (\n                lines +\n                eol +\n                \"Content-Type: multipart/mixed; boundary=\" +\n                this.boundaries.mixed +\n                eol +\n                eol +\n                \"--\" +\n                this.boundaries.mixed +\n                eol +\n                \"Content-Type: multipart/related; boundary=\" +\n                this.boundaries.related +\n                eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.related) +\n                eol +\n                eol +\n                inlineAttachments +\n                \"--\" +\n                this.boundaries.related +\n                \"--\" +\n                eol +\n                attachments +\n                \"--\" +\n                this.boundaries.mixed +\n                \"--\"\n            );\n        } else if (structure === \"mixed\") {\n            const attachments = this.getAttachments()\n                .map(\n                    (a) =>\n                        \"--\" +\n                        this.boundaries.mixed +\n                        eol +\n                        a.dump() +\n                        eol +\n                        eol,\n                )\n                .join(\"\")\n                .slice(0, -1 * eol.length);\n            return (\n                lines +\n                eol +\n                \"Content-Type: multipart/mixed; boundary=\" +\n                this.boundaries.mixed +\n                eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.mixed) +\n                eol +\n                (plaintext && html ? \"\" : eol) +\n                attachments +\n                \"--\" +\n                this.boundaries.mixed +\n                \"--\"\n            );\n        } else if (structure === \"related\") {\n            const inlineAttachments = this.getInlineAttachments()\n                .map(\n                    (a) =>\n                        \"--\" +\n                        this.boundaries.related +\n                        eol +\n                        a.dump() +\n                        eol +\n                        eol,\n                )\n                .join(\"\")\n                .slice(0, -1 * eol.length);\n            return (\n                lines +\n                eol +\n                \"Content-Type: multipart/related; boundary=\" +\n                this.boundaries.related +\n                eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.related) +\n                eol +\n                eol +\n                inlineAttachments +\n                \"--\" +\n                this.boundaries.related +\n                \"--\"\n            );\n        } else if (structure === \"alternative\") {\n            return (\n                lines +\n                eol +\n                \"Content-Type: multipart/alternative; boundary=\" +\n                this.boundaries.alt +\n                eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.alt) +\n                eol +\n                eol +\n                \"--\" +\n                this.boundaries.alt +\n                \"--\"\n            );\n        } else {\n            return lines + eol + primaryMessage.dump();\n        }\n    }\n\n    asEncoded(): string {\n        return this.envctx.toBase64WebSafe(this.asRaw());\n    }\n\n    dumpTextContent(\n        plaintext: MIMEMessageContent | undefined,\n        html: MIMEMessageContent | undefined,\n        boundary: string,\n    ): string {\n        const eol = this.envctx.eol;\n        const primaryMessage = html ?? plaintext;\n\n        let data = \"\";\n\n        if (\n            plaintext &&\n            html &&\n            (this.hasInlineAttachments() || this.hasAttachments())\n        ) {\n            data =\n                \"--\" +\n                boundary +\n                eol +\n                \"Content-Type: multipart/alternative; boundary=\" +\n                this.boundaries.alt +\n                eol +\n                eol +\n                \"--\" +\n                this.boundaries.alt +\n                eol +\n                plaintext.dump() +\n                eol +\n                eol +\n                \"--\" +\n                this.boundaries.alt +\n                eol +\n                html.dump() +\n                eol +\n                eol +\n                \"--\" +\n                this.boundaries.alt +\n                \"--\";\n        } else if (plaintext && html) {\n            data =\n                \"--\" +\n                boundary +\n                eol +\n                plaintext.dump() +\n                eol +\n                eol +\n                \"--\" +\n                boundary +\n                eol +\n                html.dump();\n        } else {\n            data = \"--\" + boundary + eol + primaryMessage!.dump();\n        }\n\n        return data;\n    }\n\n    hasInlineAttachments(): boolean {\n        return this.messages.some((msg) => msg.isInlineAttachment());\n    }\n\n    hasAttachments(): boolean {\n        return this.messages.some((msg) => msg.isAttachment());\n    }\n\n    getAttachments(): MIMEMessageContent[] | [] {\n        const matcher = (msg: MIMEMessageContent): boolean =>\n            msg.isAttachment();\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : [];\n    }\n\n    getInlineAttachments(): MIMEMessageContent[] | [] {\n        const matcher = (msg: MIMEMessageContent): boolean =>\n            msg.isInlineAttachment();\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : [];\n    }\n\n    getMessageByType(type: string): MIMEMessageContent | undefined {\n        const matcher = (msg: MIMEMessageContent): boolean =>\n            !msg.isAttachment() &&\n            !msg.isInlineAttachment() &&\n            ((msg.getHeader(\"Content-Type\") as string) || \"\").includes(type);\n        return this.messages.some(matcher)\n            ? this.messages.filter(matcher)[0]\n            : undefined;\n    }\n\n    addAttachment(opts: AttachmentOptions): MIMEMessageContent {\n        if (!this.isObject(opts.headers)) opts.headers = {};\n\n        if (typeof opts.filename !== \"string\") {\n            throw new MIMETextError(\n                \"MIMETEXT_MISSING_FILENAME\",\n                'The property \"filename\" must exist while adding attachments.',\n            );\n        }\n\n        let type = (opts.headers[\"Content-Type\"] ?? opts.contentType) || \"none\";\n        if (this.envctx.validateContentType(type) === false) {\n            throw new MIMETextError(\n                \"MIMETEXT_INVALID_MESSAGE_TYPE\",\n                `You specified an invalid content type \"${type}\".`,\n            );\n        }\n\n        const encoding =\n            opts.headers[\"Content-Transfer-Encoding\"] ??\n            opts.encoding ??\n            \"base64\";\n        if (!this.validContentTransferEncodings.includes(encoding)) {\n            type = \"application/octet-stream\";\n        }\n\n        const contentId = opts.headers[\"Content-ID\"];\n        if (\n            typeof contentId === \"string\" &&\n            contentId.length > 2 &&\n            !contentId.startsWith(\"<\") &&\n            !contentId.endsWith(\">\")\n        ) {\n            opts.headers[\"Content-ID\"] = \"<\" + opts.headers[\"Content-ID\"] + \">\";\n        }\n\n        const disposition = opts.inline ? \"inline\" : \"attachment\";\n\n        opts.headers = Object.assign({}, opts.headers, {\n            \"Content-Type\": `${type}; name=\"${opts.filename}\"`,\n            \"Content-Transfer-Encoding\": encoding,\n            \"Content-Disposition\": `${disposition}; filename=\"${opts.filename}\"`,\n        });\n\n        return this._addMessage({ data: opts.data, headers: opts.headers });\n    }\n\n    addMessage(opts: ContentOptions): MIMEMessageContent {\n        if (!this.isObject(opts.headers)) opts.headers = {};\n\n        let type = (opts.headers[\"Content-Type\"] ?? opts.contentType) || \"none\";\n        if (!this.validTypes.includes(type)) {\n            throw new MIMETextError(\n                \"MIMETEXT_INVALID_MESSAGE_TYPE\",\n                `Valid content types are ${this.validTypes.join(\", \")} but you specified \"${type}\".`,\n            );\n        }\n\n        const encoding =\n            opts.headers[\"Content-Transfer-Encoding\"] ??\n            opts.encoding ??\n            \"7bit\";\n        if (!this.validContentTransferEncodings.includes(encoding)) {\n            type = \"application/octet-stream\";\n        }\n\n        const charset = opts.charset ?? \"UTF-8\";\n\n        opts.headers = Object.assign({}, opts.headers, {\n            \"Content-Type\": `${type}; charset=${charset}`,\n            \"Content-Transfer-Encoding\": encoding,\n        });\n\n        return this._addMessage({ data: opts.data, headers: opts.headers });\n    }\n\n    private _addMessage(opts: {\n        data: string;\n        headers: ContentHeaders;\n    }): MIMEMessageContent {\n        const msg = new MIMEMessageContent(\n            this.envctx,\n            opts.data,\n            opts.headers,\n        );\n\n        this.messages.push(msg);\n\n        return msg;\n    }\n\n    setSender(\n        input: MailboxAddrObject | string,\n        config: MailboxConfig = { type: \"From\" },\n    ): Mailbox {\n        const mailbox = new Mailbox(input, config);\n        this.setHeader(\"From\", mailbox);\n        return mailbox;\n    }\n\n    getSender(): Mailbox | undefined {\n        return this.getHeader(\"From\") as Mailbox;\n    }\n\n    setRecipients(\n        input: MailboxAddrObject | string | MailboxAddrObject[] | string[],\n        config: MailboxConfig = { type: \"To\" },\n    ): Mailbox[] {\n        const arr = !this.isArray(input) ? [input] : input;\n        const recs = arr.map((_input) => new Mailbox(_input, config));\n        this.setHeader(config.type, recs);\n        return recs;\n    }\n\n    getRecipients(\n        config: MailboxConfig = { type: \"To\" },\n    ): Mailbox | Mailbox[] | undefined {\n        return this.getHeader(config.type) as Mailbox | Mailbox[] | undefined;\n    }\n\n    setRecipient(\n        input: MailboxAddrObject | string | MailboxAddrObject[] | string[],\n        config: MailboxConfig = { type: \"To\" },\n    ): Mailbox[] {\n        return this.setRecipients(input, config);\n    }\n\n    setTo(\n        input: MailboxAddrObject | string | MailboxAddrObject[] | string[],\n        config: MailboxConfig = { type: \"To\" },\n    ): Mailbox[] {\n        return this.setRecipients(input, config);\n    }\n\n    setCc(\n        input: MailboxAddrObject | string | MailboxAddrObject[] | string[],\n        config: MailboxConfig = { type: \"Cc\" },\n    ): Mailbox[] {\n        return this.setRecipients(input, config);\n    }\n\n    setBcc(\n        input: MailboxAddrObject | string | MailboxAddrObject[] | string[],\n        config: MailboxConfig = { type: \"Bcc\" },\n    ): Mailbox[] {\n        return this.setRecipients(input, config);\n    }\n\n    setSubject(value: string): string {\n        this.setHeader(\"subject\", value);\n        return value;\n    }\n\n    getSubject(): string | undefined {\n        return this.getHeader(\"subject\") as string;\n    }\n\n    setHeader(name: string, value: string | Mailbox | Mailbox[]): string {\n        this.headers.set(name, value);\n        return name;\n    }\n\n    getHeader(name: string): string | Mailbox | Mailbox[] | undefined {\n        return this.headers.get(name);\n    }\n\n    setHeaders(obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!));\n    }\n\n    getHeaders(): HeadersObject {\n        return this.headers.toObject();\n    }\n\n    toBase64(v: string): string {\n        return this.envctx.toBase64(v);\n    }\n\n    toBase64WebSafe(v: string): string {\n        return this.envctx.toBase64WebSafe(v);\n    }\n\n    generateBoundaries(): void {\n        const gmailishBoundary = (): string => {\n            const hex = (n: number) => randomBytes(n).toString(\"hex\"); // lowercase\n            return \"000000000000\" + hex(8) + hex(3);\n        };\n        this.boundaries = {\n            mixed: gmailishBoundary(),\n            alt: gmailishBoundary(),\n            related: gmailishBoundary(),\n        };\n    }\n\n    isArray(v: unknown): v is unknown[] {\n        return !!v && v.constructor === Array;\n    }\n\n    isObject(v: unknown): v is object {\n        return !!v && v.constructor === Object;\n    }\n\n    /**\n     * Convenience to strip common fingerprints at once.\n     * Call this right before serialization if you want.\n     */\n    stripFingerprints(\n        headers: string[] = [\n            \"Message-ID\",\n            \"Message-Id\",\n            \"X-Mailer\",\n            \"User-Agent\",\n        ],\n    ): void {\n        this.headers.removeMany(headers);\n    }\n}\n\nexport interface EnvironmentContext {\n    toBase64: (v: string) => string;\n    toBase64WebSafe: (v: string) => string;\n    eol: string;\n    validateContentType: (v: string) => string | false;\n}\n\nexport interface Boundaries {\n    mixed: string;\n    alt: string;\n    related: string;\n}\n\nexport type ContentTransferEncoding =\n    | \"7bit\"\n    | \"8bit\"\n    | \"binary\"\n    | \"quoted-printable\"\n    | \"base64\";\n\nexport interface ContentHeaders {\n    \"Content-Type\"?: string;\n    \"Content-Transfer-Encoding\"?: ContentTransferEncoding;\n    \"Content-Disposition\"?: string;\n    \"Content-ID\"?: string;\n    [index: string]: string | undefined;\n}\n\nexport interface ContentOptions {\n    data: string;\n    encoding?: ContentTransferEncoding;\n    contentType: string;\n    headers?: ContentHeaders;\n    charset?: string;\n}\n\nexport interface AttachmentOptions extends ContentOptions {\n    inline?: boolean;\n    filename: string;\n}\n","import { Base64 } from 'js-base64'\r\nimport { MIMEMessage } from '../MIMEMessage.js'\r\n\r\nconst envctx = {\r\n    toBase64: function toBase64 (data: string) {\r\n        return Base64.encode(data)\r\n    },\r\n    toBase64WebSafe: function toBase64WebSafe (data: string) {\r\n        return Base64.encodeURI(data)\r\n    },\r\n    eol: '\\r\\n',\r\n    validateContentType: (v: string): string | false => {\r\n        return v.length > 0 ? v : false\r\n    }\r\n}\r\n\r\nexport function createMimeMessage (): MIMEMessage {\r\n    return new MIMEMessage(envctx)\r\n}\r\n\r\nexport { MIMEMessage } from '../MIMEMessage.js'\r\nexport { Mailbox } from '../Mailbox.js'\r\nexport { MIMETextError } from '../MIMETextError.js'\r\nexport { MIMEMessageHeader } from '../MIMEMessageHeader.js'\r\nexport { MIMEMessageContent } from '../MIMEMessageContent.js'\r\n\r\nexport type * from '../MIMEMessage.js'\r\nexport type * from '../Mailbox.js'\r\nexport type * from '../MIMETextError.js'\r\nexport type * from '../MIMEMessageHeader.js'\r\nexport type * from '../MIMEMessageContent.js'\r\n"],"names":["MIMETextError","Error","constructor","message","description","arguments","length","undefined","super","_defineProperty","this","name","Mailbox","input","config","type","parse","getAddrDomain","addr","includes","arr","split","dump","concat","isMailboxAddrObject","isMailboxAddrText","text","_trimInstanceProperty","call","startsWith","endsWith","slice","test","v","reSpecCompliantAddr","isObject","Object","hasOwn","MIMEMessageHeader","envctx","generator","Date","toUTCString","replace","required","validate","validateMailboxSingle","dumpMailboxSingle","validateMailboxMulti","dumpMailboxMulti","Math","random","toString","fields","filter","obj","value","toBase64","lines","field","disabled","isValueDefinedByUser","strval","eol","toObject","reduce","memo","item","get","ind","findIndex","toLowerCase","remove","n","h","removeMany","names","lower","s","set","Set","map","has","some","fieldMatcher","setCustom","custom","isHeaderField","push","isArrayOfMailboxes","join","validProps","keys","prop","isArray","every","Array","MIMEMessageContentHeader","MIMEMessageContent","data","headers","setHeaders","isAttachment","disposition","isInlineAttachment","setHeader","getHeader","getHeaders","MIMEMessage","mixed","alt","related","messages","generateBoundaries","asRaw","_ref","plaintext","getMessageByType","html","primaryMessage","hasAttachments","hasInlineAttachments","structure","attachments","getAttachments","a","boundaries","inlineAttachments","getInlineAttachments","dumpTextContent","asEncoded","toBase64WebSafe","boundary","msg","matcher","addAttachment","opts","_opts$headers$Content","_ref2","_opts$headers$Content2","filename","contentType","validateContentType","encoding","validContentTransferEncodings","contentId","inline","assign","_addMessage","addMessage","_opts$headers$Content3","_ref3","_opts$headers$Content4","_opts$charset","validTypes","charset","setSender","mailbox","getSender","setRecipients","recs","_input","getRecipients","setRecipient","setTo","setCc","setBcc","setSubject","getSubject","gmailishBoundary","hex","randomBytes","stripFingerprints","Base64","encode","encodeURI"],"mappings":"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"}